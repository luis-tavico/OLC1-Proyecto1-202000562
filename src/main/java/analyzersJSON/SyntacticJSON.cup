package analyzersJSON;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Variable;


parser code {:

    public LinkedList<SintaxError> errors = new LinkedList<>();
    public LinkedList<Variable> variables_json = new LinkedList<>();
    public String file_path = "";

    public void setValues (LinkedList<Variable> variables_json, String path) {
        variables_json = variables_json;
        file_path = path;
    }

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, (s.right-1)));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            :}

terminal String LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET, COMMA, COLON;
terminal String DECIMAL, STRING;

non terminal success, valid_json, value, object, member_list, pair, array, value_list;

start with success;

success ::= valid_json;

valid_json ::= array 
             | object;

object ::= LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET
         | LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET; 

member_list ::= member_list COMMA pair 
              | pair;

pair ::= STRING:k COLON value:v {: variables_json.add(new Variable(k, String.valueOf(v), file_path)); :};

array ::= LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
        | LEFT_SQUARE_BRACKET value_list RIGHT_SQUARE_BRACKET;

value_list ::= value_list COMMA value 
             | value;

value ::= STRING:s {: RESULT = s.toString(); :}
        | DECIMAL:d {: RESULT = d.toString(); :}
        | array
        | object;