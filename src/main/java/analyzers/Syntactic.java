
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Statement;
import instructions.Operation;
import instructions.Param;
import instructions.Print;
import enums.EnumOperations;
import enums.EnumTerminals;
import enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\011\000\002\013" +
    "\004\000\002\013\003\000\002\012\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\011\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\011\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\004\005\001\002\000\004\002\101\001" +
    "\002\000\004\005\006\001\002\000\004\043\007\001\002" +
    "\000\004\044\010\001\002\000\004\045\011\001\002\000" +
    "\006\003\012\017\016\001\002\000\004\061\100\001\002" +
    "\000\010\003\012\017\016\046\ufffe\001\002\000\010\003" +
    "\ufffd\017\ufffd\046\ufffd\001\002\000\004\046\076\001\002" +
    "\000\004\060\017\001\002\000\004\020\020\001\002\000" +
    "\004\043\021\001\002\000\024\021\023\022\026\023\035" +
    "\024\025\025\030\026\033\036\036\040\022\043\027\001" +
    "\002\000\024\021\023\022\026\023\035\024\025\025\030" +
    "\026\033\036\036\040\022\043\027\001\002\000\034\034" +
    "\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\056\uffeb\057\uffeb\001" +
    "\002\000\034\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\044\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\056" +
    "\ufff8\057\ufff8\001\002\000\034\034\ufff1\035\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\044\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\056\ufff1\057\ufff1\001\002\000\034\034\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\044\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\056\uffec\057\uffec\001\002" +
    "\000\024\021\023\022\026\023\035\024\025\025\030\026" +
    "\033\036\036\040\022\043\027\001\002\000\034\034\uffe2" +
    "\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\056\uffe2\057\uffe2\001\002" +
    "\000\034\034\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\044\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\056\ufff6" +
    "\057\ufff6\001\002\000\034\034\ufff7\035\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\044\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\056\ufff7\057\ufff7\001\002\000\034\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\056\ufff3\057\ufff3\001\002\000" +
    "\034\034\041\035\054\037\047\040\042\041\051\042\045" +
    "\044\071\051\046\052\053\053\050\054\052\056\044\057" +
    "\043\001\002\000\034\034\ufff2\035\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\044\ufff2\051\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\056\ufff2\057\ufff2\001\002\000\024\021\023\022\026" +
    "\023\035\024\025\025\030\026\033\036\036\040\022\043" +
    "\027\001\002\000\034\034\ufff5\035\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\044\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\034\034\041\035\054" +
    "\037\047\040\042\041\051\042\045\044\uffe0\051\046\052" +
    "\053\053\050\054\052\056\044\057\043\001\002\000\024" +
    "\021\023\022\026\023\035\024\025\025\030\026\033\036" +
    "\036\040\022\043\027\001\002\000\024\021\023\022\026" +
    "\023\035\024\025\025\030\026\033\036\036\040\022\043" +
    "\027\001\002\000\024\021\023\022\026\023\035\024\025" +
    "\025\030\026\033\036\036\040\022\043\027\001\002\000" +
    "\024\021\023\022\026\023\035\024\025\025\030\026\033" +
    "\036\036\040\022\043\027\001\002\000\024\021\023\022" +
    "\026\023\035\024\025\025\030\026\033\036\036\040\022" +
    "\043\027\001\002\000\024\021\023\022\026\023\035\024" +
    "\025\025\030\026\033\036\036\040\022\043\027\001\002" +
    "\000\024\021\023\022\026\023\035\024\025\025\030\026" +
    "\033\036\036\040\022\043\027\001\002\000\024\021\023" +
    "\022\026\023\035\024\025\025\030\026\033\036\036\040" +
    "\022\043\027\001\002\000\024\021\023\022\026\023\035" +
    "\024\025\025\030\026\033\036\036\040\022\043\027\001" +
    "\002\000\024\021\023\022\026\023\035\024\025\025\030" +
    "\026\033\036\036\040\022\043\027\001\002\000\024\021" +
    "\023\022\026\023\035\024\025\025\030\026\033\036\036" +
    "\040\022\043\027\001\002\000\024\021\023\022\026\023" +
    "\035\024\025\025\030\026\033\036\036\040\022\043\027" +
    "\001\002\000\034\034\uffe3\035\uffe3\037\047\040\042\041" +
    "\051\042\045\044\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\056\uffe3\057\uffe3\001\002\000\034\034\041\035\054\037" +
    "\047\040\042\041\051\042\045\044\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\056\uffea\057\uffea\001\002\000\034\034" +
    "\041\035\054\037\047\040\042\041\051\042\045\044\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8\001" +
    "\002\000\034\034\uffee\035\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\044\uffee\051\uffee\052\uffee\053\uffee\054\uffee\056" +
    "\uffee\057\uffee\001\002\000\034\034\041\035\054\037\047" +
    "\040\042\041\051\042\045\044\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\056\uffe7\057\uffe7\001\002\000\034\034\ufff0" +
    "\035\ufff0\037\ufff0\040\ufff0\041\051\042\045\044\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0\057\ufff0\001\002" +
    "\000\034\034\041\035\054\037\047\040\042\041\051\042" +
    "\045\044\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\056\uffe9" +
    "\057\uffe9\001\002\000\034\034\uffed\035\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\044\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\056\uffed\057\uffed\001\002\000\034\034\041\035" +
    "\054\037\047\040\042\041\051\042\045\044\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\056\uffe6\057\uffe6\001\002\000" +
    "\034\034\041\035\054\037\047\040\042\041\051\042\045" +
    "\044\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057" +
    "\uffe5\001\002\000\034\034\uffef\035\uffef\037\uffef\040\uffef" +
    "\041\051\042\045\044\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\056\uffef\057\uffef\001\002\000\034\034\uffe4\035\uffe4" +
    "\037\047\040\042\041\051\042\045\044\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\056\uffe4\057\uffe4\001\002\000\004" +
    "\061\072\001\002\000\010\003\ufffa\017\ufffa\046\ufffa\001" +
    "\002\000\034\034\041\035\054\037\047\040\042\041\051" +
    "\042\045\044\074\051\046\052\053\053\050\054\052\056" +
    "\044\057\043\001\002\000\034\034\ufff4\035\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\044\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\056\ufff4\057\ufff4\001\002\000\034\034\uffe1" +
    "\035\uffe1\037\uffe1\040\uffe1\041\051\042\045\044\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\001\002" +
    "\000\004\002\000\001\002\000\004\046\uffff\001\002\000" +
    "\010\003\ufff9\017\ufff9\046\ufff9\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\013\012\012\013\014\001\001\000" +
    "\002\001\001\000\010\004\013\012\012\013\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\033\006\023" +
    "\007\031\010\030\011\036\001\001\000\014\005\074\006" +
    "\023\007\031\010\030\011\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\072\006\023\007\031\010\030\011\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\037\006\023\007\031\010\030\011\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\067\006\023" +
    "\007\031\010\030\011\036\001\001\000\014\005\066\006" +
    "\023\007\031\010\030\011\036\001\001\000\014\005\065" +
    "\006\023\007\031\010\030\011\036\001\001\000\014\005" +
    "\064\006\023\007\031\010\030\011\036\001\001\000\014" +
    "\005\063\006\023\007\031\010\030\011\036\001\001\000" +
    "\014\005\062\006\023\007\031\010\030\011\036\001\001" +
    "\000\014\005\061\006\023\007\031\010\030\011\036\001" +
    "\001\000\014\005\060\006\023\007\031\010\030\011\036" +
    "\001\001\000\014\005\057\006\023\007\031\010\030\011" +
    "\036\001\001\000\014\005\056\006\023\007\031\010\030" +
    "\011\036\001\001\000\014\005\055\006\023\007\031\010" +
    "\030\011\036\001\001\000\014\005\054\006\023\007\031" +
    "\010\030\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, (s.right-1)));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action_part00000000(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET mainstatements RIGHT_CURLY_BRACKET 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 parser.AST = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatement mainstatements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= CONSOLE PERIOD WRITE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= error SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = s;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = a;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = l;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = u;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // symbols ::= TEXT 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(t, EnumTerminals.TEXT);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // symbols ::= CHARACTER 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHARACTER);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aritmetic ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.PLUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aritmetic ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MINUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aritmetic ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.TIMES, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aritmetic ::= expr DIVIDE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDE, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aritmetic ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.INTEGER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aritmetic ::= DECIMAL 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(d, EnumTerminals.DECIMAL); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logical ::= expr GREATER_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logical ::= expr LESS_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logical ::= expr GREATER_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical ::= expr LESS_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical ::= expr EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical ::= expr NOT_EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.NOT_EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.AND, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.OR, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(b, EnumTerminals.BOOLEAN); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unitary ::= MINUS expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.MINUS); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.NOT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
              return CUP$Syntactic$do_action_part00000000(
                               CUP$Syntactic$act_num,
                               CUP$Syntactic$parser,
                               CUP$Syntactic$stack,
                               CUP$Syntactic$top);
    }
}

}
