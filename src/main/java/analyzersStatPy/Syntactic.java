
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzersStatPy;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Statement;
import instructions.Operation;
import instructions.Param;
import instructions.If;
import instructions.ElseIf;
import instructions.Switch;
import instructions.Case;
import instructions.For;
import instructions.While;
import instructions.DoWhile;
import instructions.Print;
import enums.EnumOperations;
import enums.EnumTerminals;
import enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\011\000\002\017" +
    "\004\000\002\017\003\000\002\016\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\007\000" +
    "\002\004\006\000\002\004\003\000\002\004\010\000\002" +
    "\004\011\000\002\004\014\000\002\004\003\000\002\004" +
    "\011\000\002\004\010\000\002\004\013\000\002\004\012" +
    "\000\002\004\011\000\002\004\004\000\002\004\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\010\011\000\002\010" +
    "\015\000\002\010\012\000\002\010\016\000\002\006\012" +
    "\000\002\006\011\000\002\007\007\000\002\007\006\000" +
    "\002\011\021\000\002\011\020\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\004\000" +
    "\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\004\005\001\002\000\004\002\256\001" +
    "\002\000\004\005\006\001\002\000\004\044\007\001\002" +
    "\000\004\045\010\001\002\000\004\046\011\001\002\000" +
    "\034\003\027\006\021\011\020\015\033\016\015\017\024" +
    "\020\017\027\023\030\013\031\034\032\014\033\031\034" +
    "\025\001\002\000\036\003\ufffd\006\ufffd\011\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\047\ufffd\001\002\000\004\027\uffeb" +
    "\001\002\000\004\027\uffe9\001\002\000\004\044\247\001" +
    "\002\000\004\027\242\001\002\000\004\061\234\001\002" +
    "\000\004\044\211\001\002\000\004\044\154\001\002\000" +
    "\004\047\153\001\002\000\004\056\150\001\002\000\004" +
    "\046\132\001\002\000\004\027\uffe8\001\002\000\042\003" +
    "\ufff7\006\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\047\ufff7\001\002\000\006\047\131\062\130" +
    "\001\002\000\042\003\ufff3\006\ufff3\011\ufff3\012\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\047\ufff3\001\002\000" +
    "\004\027\uffe7\001\002\000\036\003\027\006\021\011\020" +
    "\015\033\016\015\017\024\020\017\027\023\030\013\031" +
    "\034\032\014\033\031\034\025\047\ufffe\001\002\000\004" +
    "\044\035\001\002\000\004\027\uffea\001\002\000\004\030" +
    "\036\001\002\000\004\027\037\001\002\000\004\056\040" +
    "\001\002\000\004\023\041\001\002\000\004\062\042\001" +
    "\002\000\024\022\044\023\046\024\056\025\047\026\051" +
    "\027\054\037\057\041\043\044\050\001\002\000\024\022" +
    "\044\023\046\024\056\025\047\026\051\027\054\037\057" +
    "\041\043\044\050\001\002\000\036\035\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\057\uffcf\060\uffcf\062\uffcf\001\002\000" +
    "\036\035\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc\060" +
    "\uffdc\062\uffdc\001\002\000\036\035\uffd0\036\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\045\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\062\uffd0\001\002\000\036" +
    "\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5" +
    "\062\uffd5\001\002\000\024\022\044\023\046\024\056\025" +
    "\047\026\051\027\054\037\057\041\043\044\050\001\002" +
    "\000\036\035\uffc6\036\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\045\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6" +
    "\060\uffc6\062\uffc6\001\002\000\036\035\uffda\036\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\045\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\057\uffda\060\uffda\062\uffda\001\002\000" +
    "\036\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\045\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060" +
    "\uffdb\062\uffdb\001\002\000\036\035\uffd7\036\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\045\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\057\uffd7\060\uffd7\062\uffd7\001\002\000\034" +
    "\035\063\036\075\040\070\041\062\042\072\043\066\052" +
    "\067\053\074\054\071\055\073\057\064\060\065\062\112" +
    "\001\002\000\036\035\uffd6\036\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\045\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\057\uffd6\060\uffd6\062\uffd6\001\002\000\024\022\044\023" +
    "\046\024\056\025\047\026\051\027\054\037\057\041\043" +
    "\044\050\001\002\000\036\035\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\045\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\057\uffd9\060\uffd9\062\uffd9\001\002\000\036\035" +
    "\063\036\075\040\070\041\062\042\072\043\066\045\uffc4" +
    "\052\067\053\074\054\071\055\073\057\064\060\065\062" +
    "\uffc4\001\002\000\024\022\044\023\046\024\056\025\047" +
    "\026\051\027\054\037\057\041\043\044\050\001\002\000" +
    "\024\022\044\023\046\024\056\025\047\026\051\027\054" +
    "\037\057\041\043\044\050\001\002\000\024\022\044\023" +
    "\046\024\056\025\047\026\051\027\054\037\057\041\043" +
    "\044\050\001\002\000\024\022\044\023\046\024\056\025" +
    "\047\026\051\027\054\037\057\041\043\044\050\001\002" +
    "\000\024\022\044\023\046\024\056\025\047\026\051\027" +
    "\054\037\057\041\043\044\050\001\002\000\024\022\044" +
    "\023\046\024\056\025\047\026\051\027\054\037\057\041" +
    "\043\044\050\001\002\000\024\022\044\023\046\024\056" +
    "\025\047\026\051\027\054\037\057\041\043\044\050\001" +
    "\002\000\024\022\044\023\046\024\056\025\047\026\051" +
    "\027\054\037\057\041\043\044\050\001\002\000\024\022" +
    "\044\023\046\024\056\025\047\026\051\027\054\037\057" +
    "\041\043\044\050\001\002\000\024\022\044\023\046\024" +
    "\056\025\047\026\051\027\054\037\057\041\043\044\050" +
    "\001\002\000\024\022\044\023\046\024\056\025\047\026" +
    "\051\027\054\037\057\041\043\044\050\001\002\000\024" +
    "\022\044\023\046\024\056\025\047\026\051\027\054\037" +
    "\057\041\043\044\050\001\002\000\036\035\uffc7\036\uffc7" +
    "\040\070\041\062\042\072\043\066\045\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\062\uffc7\001\002" +
    "\000\036\035\063\036\075\040\070\041\062\042\072\043" +
    "\066\045\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce" +
    "\060\uffce\062\uffce\001\002\000\036\035\063\036\075\040" +
    "\070\041\062\042\072\043\066\045\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\057\uffcc\060\uffcc\062\uffcc\001\002\000" +
    "\036\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\045\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\062\uffd2\001\002\000\036\035\063\036\075\040\070" +
    "\041\062\042\072\043\066\045\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\060\uffcb\062\uffcb\001\002\000\036" +
    "\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\072\043\066\045" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4" +
    "\062\uffd4\001\002\000\036\035\063\036\075\040\070\041" +
    "\062\042\072\043\066\045\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\057\uffcd\060\uffcd\062\uffcd\001\002\000\036\035" +
    "\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\062" +
    "\uffd1\001\002\000\036\035\063\036\075\040\070\041\062" +
    "\042\072\043\066\045\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\057\uffc9\060\uffc9\062\uffc9\001\002\000\036\035\063" +
    "\036\075\040\070\041\062\042\072\043\066\045\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\057\uffca\060\uffca\062\uffca" +
    "\001\002\000\036\035\uffc8\036\uffc8\040\070\041\062\042" +
    "\072\043\066\045\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\057\uffc8\060\uffc8\062\uffc8\001\002\000\036\035\uffd3\036" +
    "\uffd3\040\uffd3\041\uffd3\042\072\043\066\045\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\062\uffd3\001" +
    "\002\000\004\027\113\001\002\000\004\064\114\001\002" +
    "\000\004\045\115\001\002\000\004\046\116\001\002\000" +
    "\036\003\027\006\021\011\020\015\033\016\015\017\024" +
    "\020\017\027\023\030\013\031\034\032\014\033\031\034" +
    "\025\047\120\001\002\000\042\003\027\006\021\011\020" +
    "\012\ufffb\014\ufffb\015\033\016\015\017\024\020\017\027" +
    "\023\030\013\031\034\032\014\033\031\034\025\047\ufffb" +
    "\001\002\000\042\003\uffdd\006\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\047\uffdd\001\002\000" +
    "\004\047\122\001\002\000\042\003\uffde\006\uffde\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\047\uffde" +
    "\001\002\000\010\012\ufffc\014\ufffc\047\ufffc\001\002\000" +
    "\034\035\063\036\075\040\070\041\062\042\072\043\066" +
    "\045\125\052\067\053\074\054\071\055\073\057\064\060" +
    "\065\001\002\000\036\035\uffd8\036\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\062\uffd8\001\002\000\036\035\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\042\072\043\066\045\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5\060\uffc5\062\uffc5" +
    "\001\002\000\004\047\uffff\001\002\000\042\003\uffec\006" +
    "\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\047\uffec\001\002\000\042\003\uffed\006\uffed\011\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\047\uffed" +
    "\001\002\000\036\003\027\006\021\011\020\015\033\016" +
    "\015\017\024\020\017\027\023\030\013\031\034\032\014" +
    "\033\031\034\025\047\133\001\002\000\004\016\143\001" +
    "\002\000\004\047\135\001\002\000\004\016\136\001\002" +
    "\000\004\044\137\001\002\000\024\022\044\023\046\024" +
    "\056\025\047\026\051\027\054\037\057\041\043\044\050" +
    "\001\002\000\034\035\063\036\075\040\070\041\062\042" +
    "\072\043\066\045\141\052\067\053\074\054\071\055\073" +
    "\057\064\060\065\001\002\000\004\062\142\001\002\000" +
    "\042\003\ufff0\006\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\047\ufff0\001\002\000\004\044\144" +
    "\001\002\000\024\022\044\023\046\024\056\025\047\026" +
    "\051\027\054\037\057\041\043\044\050\001\002\000\034" +
    "\035\063\036\075\040\070\041\062\042\072\043\066\045" +
    "\146\052\067\053\074\054\071\055\073\057\064\060\065" +
    "\001\002\000\004\062\147\001\002\000\042\003\uffef\006" +
    "\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\047\uffef\001\002\000\024\022\044\023\046\024\056" +
    "\025\047\026\051\027\054\037\057\041\043\044\050\001" +
    "\002\000\034\035\063\036\075\040\070\041\062\042\072" +
    "\043\066\052\067\053\074\054\071\055\073\057\064\060" +
    "\065\062\152\001\002\000\042\003\ufff8\006\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\047\ufff8" +
    "\001\002\000\004\002\000\001\002\000\024\022\044\023" +
    "\046\024\056\025\047\026\051\027\054\037\057\041\043" +
    "\044\050\001\002\000\034\035\063\036\075\040\070\041" +
    "\062\042\072\043\066\045\156\052\067\053\074\054\071" +
    "\055\073\057\064\060\065\001\002\000\004\046\157\001" +
    "\002\000\034\003\027\006\021\011\020\015\033\016\015" +
    "\017\024\020\017\027\023\030\013\031\034\032\014\033" +
    "\031\034\025\001\002\000\004\047\161\001\002\000\046" +
    "\003\uffe6\006\uffe6\007\162\010\163\011\uffe6\012\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\047\uffe6\001\002\000" +
    "\004\044\203\001\002\000\004\046\200\001\002\000\046" +
    "\003\uffe4\006\uffe4\007\165\010\166\011\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\047\uffe4\001\002\000" +
    "\004\044\172\001\002\000\004\046\167\001\002\000\034" +
    "\003\027\006\021\011\020\015\033\016\015\017\024\020" +
    "\017\027\023\030\013\031\034\032\014\033\031\034\025" +
    "\001\002\000\004\047\171\001\002\000\042\003\uffe3\006" +
    "\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\047\uffe3\001\002\000\024\022\044\023\046\024\056" +
    "\025\047\026\051\027\054\037\057\041\043\044\050\001" +
    "\002\000\034\035\063\036\075\040\070\041\062\042\072" +
    "\043\066\045\174\052\067\053\074\054\071\055\073\057" +
    "\064\060\065\001\002\000\004\046\175\001\002\000\034" +
    "\003\027\006\021\011\020\015\033\016\015\017\024\020" +
    "\017\027\023\030\013\031\034\032\014\033\031\034\025" +
    "\001\002\000\004\047\177\001\002\000\046\003\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\047\uffe2\001\002\000\034\003\027" +
    "\006\021\011\020\015\033\016\015\017\024\020\017\027" +
    "\023\030\013\031\034\032\014\033\031\034\025\001\002" +
    "\000\004\047\202\001\002\000\042\003\uffe5\006\uffe5\011" +
    "\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\047" +
    "\uffe5\001\002\000\024\022\044\023\046\024\056\025\047" +
    "\026\051\027\054\037\057\041\043\044\050\001\002\000" +
    "\034\035\063\036\075\040\070\041\062\042\072\043\066" +
    "\045\205\052\067\053\074\054\071\055\073\057\064\060" +
    "\065\001\002\000\004\046\206\001\002\000\034\003\027" +
    "\006\021\011\020\015\033\016\015\017\024\020\017\027" +
    "\023\030\013\031\034\032\014\033\031\034\025\001\002" +
    "\000\004\047\210\001\002\000\046\003\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\047\uffe1\001\002\000\024\022\044\023\046" +
    "\024\056\025\047\026\051\027\054\037\057\041\043\044" +
    "\050\001\002\000\034\035\063\036\075\040\070\041\062" +
    "\042\072\043\066\045\213\052\067\053\074\054\071\055" +
    "\073\057\064\060\065\001\002\000\004\046\214\001\002" +
    "\000\006\012\217\047\215\001\002\000\042\003\ufff6\006" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\047\ufff6\001\002\000\010\012\225\014\223\047\224" +
    "\001\002\000\004\023\220\001\002\000\004\063\221\001" +
    "\002\000\034\003\027\006\021\011\020\015\033\016\015" +
    "\017\024\020\017\027\023\030\013\031\034\032\014\033" +
    "\031\034\025\001\002\000\010\012\uffdf\014\uffdf\047\uffdf" +
    "\001\002\000\004\063\231\001\002\000\042\003\ufff5\006" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\047\ufff5\001\002\000\004\023\226\001\002\000\004" +
    "\063\227\001\002\000\034\003\027\006\021\011\020\015" +
    "\033\016\015\017\024\020\017\027\023\030\013\031\034" +
    "\032\014\033\031\034\025\001\002\000\010\012\uffe0\014" +
    "\uffe0\047\uffe0\001\002\000\034\003\027\006\021\011\020" +
    "\015\033\016\015\017\024\020\017\027\023\030\013\031" +
    "\034\032\014\033\031\034\025\001\002\000\004\047\233" +
    "\001\002\000\042\003\ufff4\006\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\047\ufff4\001\002\000" +
    "\004\021\235\001\002\000\004\044\236\001\002\000\024" +
    "\022\044\023\046\024\056\025\047\026\051\027\054\037" +
    "\057\041\043\044\050\001\002\000\034\035\063\036\075" +
    "\040\070\041\062\042\072\043\066\045\240\052\067\053" +
    "\074\054\071\055\073\057\064\060\065\001\002\000\004" +
    "\062\241\001\002\000\042\003\uffee\006\uffee\011\uffee\012" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\047\uffee\001" +
    "\002\000\006\056\244\062\243\001\002\000\042\003\ufffa" +
    "\006\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\047\ufffa\001\002\000\024\022\044\023\046\024" +
    "\056\025\047\026\051\027\054\037\057\041\043\044\050" +
    "\001\002\000\034\035\063\036\075\040\070\041\062\042" +
    "\072\043\066\052\067\053\074\054\071\055\073\057\064" +
    "\060\065\062\246\001\002\000\042\003\ufff9\006\ufff9\011" +
    "\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\047" +
    "\ufff9\001\002\000\024\022\044\023\046\024\056\025\047" +
    "\026\051\027\054\037\057\041\043\044\050\001\002\000" +
    "\034\035\063\036\075\040\070\041\062\042\072\043\066" +
    "\045\251\052\067\053\074\054\071\055\073\057\064\060" +
    "\065\001\002\000\004\046\252\001\002\000\036\003\027" +
    "\006\021\011\020\015\033\016\015\017\024\020\017\027" +
    "\023\030\013\031\034\032\014\033\031\034\025\047\253" +
    "\001\002\000\042\003\ufff1\006\ufff1\011\ufff1\012\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\047\ufff1\001\002\000" +
    "\004\047\255\001\002\000\042\003\ufff2\006\ufff2\011\ufff2" +
    "\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\047\ufff2" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\011\010\025\011\027\016\031\017" +
    "\021\020\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\011\010\025\011\027\016" +
    "\031\017\126\020\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\054" +
    "\012\044\013\052\014\051\015\057\001\001\000\014\005" +
    "\125\012\044\013\052\014\051\015\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\123\012\044\013\052\014\051\015\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\060\012\044\013\052\014\051\015\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\110" +
    "\012\044\013\052\014\051\015\057\001\001\000\014\005" +
    "\107\012\044\013\052\014\051\015\057\001\001\000\014" +
    "\005\106\012\044\013\052\014\051\015\057\001\001\000" +
    "\014\005\105\012\044\013\052\014\051\015\057\001\001" +
    "\000\014\005\104\012\044\013\052\014\051\015\057\001" +
    "\001\000\014\005\103\012\044\013\052\014\051\015\057" +
    "\001\001\000\014\005\102\012\044\013\052\014\051\015" +
    "\057\001\001\000\014\005\101\012\044\013\052\014\051" +
    "\015\057\001\001\000\014\005\100\012\044\013\052\014" +
    "\051\015\057\001\001\000\014\005\077\012\044\013\052" +
    "\014\051\015\057\001\001\000\014\005\076\012\044\013" +
    "\052\014\051\015\057\001\001\000\014\005\075\012\044" +
    "\013\052\014\051\015\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\120\004\116" +
    "\010\025\011\027\020\015\001\001\000\014\003\122\004" +
    "\116\010\025\011\027\020\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\133\004\116\010\025\011\027\020\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\137\012\044\013\052\014\051\015\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\144\012\044\013\052" +
    "\014\051\015\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\150\012\044\013\052" +
    "\014\051\015\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\154\012\044\013\052" +
    "\014\051\015\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\157\004\116\010\025\011\027\020\015" +
    "\001\001\000\002\001\001\000\004\006\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\167\004\116\010" +
    "\025\011\027\020\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\172\012\044\013\052\014\051\015" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\175\004\116\010\025\011\027\020\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\200\004\116" +
    "\010\025\011\027\020\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\203\012\044\013\052\014\051" +
    "\015\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\206\004\116\010\025\011\027\020\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\211\012" +
    "\044\013\052\014\051\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\221\004\116\010\025\011\027\020\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\227\004" +
    "\116\010\025\011\027\020\015\001\001\000\002\001\001" +
    "\000\014\003\231\004\116\010\025\011\027\020\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\236\012\044\013\052\014" +
    "\051\015\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\244\012\044\013\052\014\051\015\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\247\012" +
    "\044\013\052\014\051\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\253\004\116\010\025\011" +
    "\027\020\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, (s.right-1)));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action_part00000000(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET mainstatements RIGHT_CURLY_BRACKET 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 parser.AST = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatement mainstatements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= data_type ID SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= data_type ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=i; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new Switch(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases DEFAULT COLON statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Switch(e, c, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= for 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=f; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new While(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new While(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= DO LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(s, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= DO LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= CONSOLE PERIOD WRITE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= error RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= error SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new If(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new If(e, s, l, null); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, l, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elseifs ::= elseifs ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		LinkedList<ElseIf> f = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = f; RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elseifs ::= ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new LinkedList<ElseIf>(); RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cases ::= cases CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = c; RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cases ::= CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON ID INCREASE RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new For(i, n, e, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-14)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON ID INCREASE RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		 RESULT = new For(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-13)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = s;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = a;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = l;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = u;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // symbols ::= TEXT 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(t, EnumTerminals.TEXT);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // symbols ::= CHARACTER 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHARACTER);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritmetic ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.PLUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aritmetic ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MINUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aritmetic ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.TIMES, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aritmetic ::= expr DIVIDE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDE, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aritmetic ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.INTEGER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aritmetic ::= DECIMAL 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(d, EnumTerminals.DECIMAL); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical ::= expr GREATER_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical ::= expr LESS_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical ::= expr GREATER_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical ::= expr LESS_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logical ::= expr EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical ::= expr NOT_EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.NOT_EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.AND, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.OR, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(b, EnumTerminals.BOOLEAN); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unitary ::= MINUS expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.MINUS); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.NOT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
              return CUP$Syntactic$do_action_part00000000(
                               CUP$Syntactic$act_num,
                               CUP$Syntactic$parser,
                               CUP$Syntactic$stack,
                               CUP$Syntactic$top);
    }
}

}
