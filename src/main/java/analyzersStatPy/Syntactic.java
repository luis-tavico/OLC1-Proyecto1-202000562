
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzersStatPy;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Statement;
import instructions.Operation;
import instructions.Param;
import instructions.If;
import instructions.ElseIf;
import instructions.Switch;
import instructions.Case;
import instructions.While;
import instructions.DoWhile;
import instructions.Print;
import enums.EnumOperations;
import enums.EnumTerminals;
import enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\011\000\002\016" +
    "\004\000\002\016\003\000\002\015\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\010\000" +
    "\002\004\011\000\002\004\014\000\002\004\011\000\002" +
    "\004\010\000\002\004\013\000\002\004\012\000\002\004" +
    "\011\000\002\004\004\000\002\004\004\000\002\014\011" +
    "\000\002\014\015\000\002\014\012\000\002\014\016\000" +
    "\002\006\012\000\002\006\011\000\002\007\007\000\002" +
    "\007\006\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\004\005\001\002\000\004\002\216\001" +
    "\002\000\004\005\006\001\002\000\004\044\007\001\002" +
    "\000\004\045\010\001\002\000\004\046\011\001\002\000" +
    "\016\003\020\006\016\011\021\016\013\017\023\020\022" +
    "\001\002\000\024\003\ufffa\006\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\047\ufffa\001\002\000\004" +
    "\044\207\001\002\000\004\047\206\001\002\000\020\003" +
    "\020\006\016\011\021\016\013\017\023\020\022\047\ufffe" +
    "\001\002\000\004\044\150\001\002\000\020\003\ufffd\006" +
    "\ufffd\011\ufffd\016\ufffd\017\ufffd\020\ufffd\047\ufffd\001\002" +
    "\000\006\047\147\062\146\001\002\000\004\044\123\001" +
    "\002\000\004\061\115\001\002\000\004\046\024\001\002" +
    "\000\020\003\020\006\016\011\021\016\013\017\023\020" +
    "\022\047\027\001\002\000\004\047\107\001\002\000\024" +
    "\003\020\006\016\011\021\012\ufffb\014\ufffb\016\013\017" +
    "\023\020\022\047\ufffb\001\002\000\004\016\030\001\002" +
    "\000\004\044\031\001\002\000\024\022\033\023\036\024" +
    "\044\025\034\026\040\027\043\037\046\041\032\044\037" +
    "\001\002\000\024\022\033\023\036\024\044\025\034\026" +
    "\040\027\043\037\046\041\032\044\037\001\002\000\034" +
    "\035\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda\060\uffda" +
    "\001\002\000\034\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\045\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\060\uffe0\001\002\000\034\035\uffe7\036\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\045\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\057\uffe7\060\uffe7\001\002\000\034\035" +
    "\uffdb\036\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060\uffdb\001" +
    "\002\000\024\022\033\023\036\024\044\025\034\026\040" +
    "\027\043\037\046\041\032\044\037\001\002\000\034\035" +
    "\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\045\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\001" +
    "\002\000\034\035\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\045\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\060\uffe5\001\002\000\034\035\uffe6\036\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\045\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\057\uffe6\060\uffe6\001\002\000\034\035\uffe2" +
    "\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2\001\002" +
    "\000\034\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\045\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1" +
    "\060\uffe1\001\002\000\034\035\051\036\064\040\057\041" +
    "\052\042\061\043\055\045\101\052\056\053\063\054\060" +
    "\055\062\057\054\060\053\001\002\000\024\022\033\023" +
    "\036\024\044\025\034\026\040\027\043\037\046\041\032" +
    "\044\037\001\002\000\034\035\uffe4\036\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\045\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\057\uffe4\060\uffe4\001\002\000\034\035\051\036" +
    "\064\040\057\041\052\042\061\043\055\045\uffcf\052\056" +
    "\053\063\054\060\055\062\057\054\060\053\001\002\000" +
    "\024\022\033\023\036\024\044\025\034\026\040\027\043" +
    "\037\046\041\032\044\037\001\002\000\024\022\033\023" +
    "\036\024\044\025\034\026\040\027\043\037\046\041\032" +
    "\044\037\001\002\000\024\022\033\023\036\024\044\025" +
    "\034\026\040\027\043\037\046\041\032\044\037\001\002" +
    "\000\024\022\033\023\036\024\044\025\034\026\040\027" +
    "\043\037\046\041\032\044\037\001\002\000\024\022\033" +
    "\023\036\024\044\025\034\026\040\027\043\037\046\041" +
    "\032\044\037\001\002\000\024\022\033\023\036\024\044" +
    "\025\034\026\040\027\043\037\046\041\032\044\037\001" +
    "\002\000\024\022\033\023\036\024\044\025\034\026\040" +
    "\027\043\037\046\041\032\044\037\001\002\000\024\022" +
    "\033\023\036\024\044\025\034\026\040\027\043\037\046" +
    "\041\032\044\037\001\002\000\024\022\033\023\036\024" +
    "\044\025\034\026\040\027\043\037\046\041\032\044\037" +
    "\001\002\000\024\022\033\023\036\024\044\025\034\026" +
    "\040\027\043\037\046\041\032\044\037\001\002\000\024" +
    "\022\033\023\036\024\044\025\034\026\040\027\043\037" +
    "\046\041\032\044\037\001\002\000\024\022\033\023\036" +
    "\024\044\025\034\026\040\027\043\037\046\041\032\044" +
    "\037\001\002\000\034\035\uffd2\036\uffd2\040\057\041\052" +
    "\042\061\043\055\045\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\057\uffd2\060\uffd2\001\002\000\034\035\051\036\064" +
    "\040\057\041\052\042\061\043\055\045\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001\002\000\034" +
    "\035\051\036\064\040\057\041\052\042\061\043\055\045" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7" +
    "\001\002\000\034\035\uffdd\036\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\045\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\060\uffdd\001\002\000\034\035\051\036\064\040" +
    "\057\041\052\042\061\043\055\045\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001\002\000\034\035" +
    "\uffdf\036\uffdf\040\uffdf\041\uffdf\042\061\043\055\045\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\001" +
    "\002\000\034\035\051\036\064\040\057\041\052\042\061" +
    "\043\055\045\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057" +
    "\uffd8\060\uffd8\001\002\000\034\035\uffdc\036\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\045\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\057\uffdc\060\uffdc\001\002\000\034\035\051" +
    "\036\064\040\057\041\052\042\061\043\055\045\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\001\002" +
    "\000\034\035\051\036\064\040\057\041\052\042\061\043" +
    "\055\045\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4" +
    "\060\uffd4\001\002\000\034\035\uffde\036\uffde\040\uffde\041" +
    "\uffde\042\061\043\055\045\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\057\uffde\060\uffde\001\002\000\034\035\uffd3\036" +
    "\uffd3\040\057\041\052\042\061\043\055\045\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\001\002\000" +
    "\004\062\102\001\002\000\024\003\ufff3\006\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\047\ufff3\001" +
    "\002\000\034\035\051\036\064\040\057\041\052\042\061" +
    "\043\055\045\104\052\056\053\063\054\060\055\062\057" +
    "\054\060\053\001\002\000\034\035\uffe3\036\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\045\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\057\uffe3\060\uffe3\001\002\000\034\035\uffd0" +
    "\036\uffd0\040\uffd0\041\uffd0\042\061\043\055\045\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002" +
    "\000\010\012\ufffc\014\ufffc\047\ufffc\001\002\000\004\016" +
    "\110\001\002\000\004\044\111\001\002\000\024\022\033" +
    "\023\036\024\044\025\034\026\040\027\043\037\046\041" +
    "\032\044\037\001\002\000\034\035\051\036\064\040\057" +
    "\041\052\042\061\043\055\045\113\052\056\053\063\054" +
    "\060\055\062\057\054\060\053\001\002\000\004\062\114" +
    "\001\002\000\024\003\ufff4\006\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\047\ufff4\001\002\000\004" +
    "\021\116\001\002\000\004\044\117\001\002\000\024\022" +
    "\033\023\036\024\044\025\034\026\040\027\043\037\046" +
    "\041\032\044\037\001\002\000\034\035\051\036\064\040" +
    "\057\041\052\042\061\043\055\045\121\052\056\053\063" +
    "\054\060\055\062\057\054\060\053\001\002\000\004\062" +
    "\122\001\002\000\024\003\ufff2\006\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\016\ufff2\017\ufff2\020\ufff2\047\ufff2\001\002\000" +
    "\024\022\033\023\036\024\044\025\034\026\040\027\043" +
    "\037\046\041\032\044\037\001\002\000\034\035\051\036" +
    "\064\040\057\041\052\042\061\043\055\045\125\052\056" +
    "\053\063\054\060\055\062\057\054\060\053\001\002\000" +
    "\004\046\126\001\002\000\006\012\131\047\127\001\002" +
    "\000\024\003\ufff9\006\ufff9\011\ufff9\012\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\047\ufff9\001\002\000\010\012\137" +
    "\014\135\047\136\001\002\000\004\023\132\001\002\000" +
    "\004\063\133\001\002\000\016\003\020\006\016\011\021" +
    "\016\013\017\023\020\022\001\002\000\010\012\uffe8\014" +
    "\uffe8\047\uffe8\001\002\000\004\063\143\001\002\000\024" +
    "\003\ufff8\006\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\047\ufff8\001\002\000\004\023\140\001\002" +
    "\000\004\063\141\001\002\000\016\003\020\006\016\011" +
    "\021\016\013\017\023\020\022\001\002\000\010\012\uffe9" +
    "\014\uffe9\047\uffe9\001\002\000\016\003\020\006\016\011" +
    "\021\016\013\017\023\020\022\001\002\000\004\047\145" +
    "\001\002\000\024\003\ufff7\006\ufff7\011\ufff7\012\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\047\ufff7\001\002\000\024" +
    "\003\ufff0\006\ufff0\011\ufff0\012\ufff0\014\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\047\ufff0\001\002\000\024\003\ufff1\006\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\047" +
    "\ufff1\001\002\000\024\022\033\023\036\024\044\025\034" +
    "\026\040\027\043\037\046\041\032\044\037\001\002\000" +
    "\034\035\051\036\064\040\057\041\052\042\061\043\055" +
    "\045\152\052\056\053\063\054\060\055\062\057\054\060" +
    "\053\001\002\000\004\046\153\001\002\000\016\003\020" +
    "\006\016\011\021\016\013\017\023\020\022\001\002\000" +
    "\004\047\155\001\002\000\030\003\uffef\006\uffef\007\156" +
    "\010\157\011\uffef\012\uffef\014\uffef\016\uffef\017\uffef\020" +
    "\uffef\047\uffef\001\002\000\004\044\177\001\002\000\004" +
    "\046\174\001\002\000\030\003\uffed\006\uffed\007\161\010" +
    "\162\011\uffed\012\uffed\014\uffed\016\uffed\017\uffed\020\uffed" +
    "\047\uffed\001\002\000\004\044\166\001\002\000\004\046" +
    "\163\001\002\000\016\003\020\006\016\011\021\016\013" +
    "\017\023\020\022\001\002\000\004\047\165\001\002\000" +
    "\024\003\uffec\006\uffec\011\uffec\012\uffec\014\uffec\016\uffec" +
    "\017\uffec\020\uffec\047\uffec\001\002\000\024\022\033\023" +
    "\036\024\044\025\034\026\040\027\043\037\046\041\032" +
    "\044\037\001\002\000\034\035\051\036\064\040\057\041" +
    "\052\042\061\043\055\045\170\052\056\053\063\054\060" +
    "\055\062\057\054\060\053\001\002\000\004\046\171\001" +
    "\002\000\016\003\020\006\016\011\021\016\013\017\023" +
    "\020\022\001\002\000\004\047\173\001\002\000\030\003" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\047\uffeb\001\002\000\016\003" +
    "\020\006\016\011\021\016\013\017\023\020\022\001\002" +
    "\000\004\047\176\001\002\000\024\003\uffee\006\uffee\011" +
    "\uffee\012\uffee\014\uffee\016\uffee\017\uffee\020\uffee\047\uffee" +
    "\001\002\000\024\022\033\023\036\024\044\025\034\026" +
    "\040\027\043\037\046\041\032\044\037\001\002\000\034" +
    "\035\051\036\064\040\057\041\052\042\061\043\055\045" +
    "\201\052\056\053\063\054\060\055\062\057\054\060\053" +
    "\001\002\000\004\046\202\001\002\000\016\003\020\006" +
    "\016\011\021\016\013\017\023\020\022\001\002\000\004" +
    "\047\204\001\002\000\030\003\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\047\uffea\001\002\000\004\047\uffff\001\002\000\004\002" +
    "\000\001\002\000\024\022\033\023\036\024\044\025\034" +
    "\026\040\027\043\037\046\041\032\044\037\001\002\000" +
    "\034\035\051\036\064\040\057\041\052\042\061\043\055" +
    "\045\211\052\056\053\063\054\060\055\062\057\054\060" +
    "\053\001\002\000\004\046\212\001\002\000\020\003\020" +
    "\006\016\011\021\016\013\017\023\020\022\047\214\001" +
    "\002\000\004\047\215\001\002\000\024\003\ufff5\006\ufff5" +
    "\011\ufff5\012\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\047" +
    "\ufff5\001\002\000\024\003\ufff6\006\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\016\ufff6\017\ufff6\020\ufff6\047\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\016\014\011\015\014\016\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\016\014\011\015\014\016\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\024\004\025\014\011\001\001\000\002\001\001\000\010" +
    "\003\105\004\025\014\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\044\010\034\011\041\012\040" +
    "\013\046\001\001\000\014\005\104\010\034\011\041\012" +
    "\040\013\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\102\010" +
    "\034\011\041\012\040\013\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\047\010\034" +
    "\011\041\012\040\013\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\077\010\034\011\041\012\040" +
    "\013\046\001\001\000\014\005\076\010\034\011\041\012" +
    "\040\013\046\001\001\000\014\005\075\010\034\011\041" +
    "\012\040\013\046\001\001\000\014\005\074\010\034\011" +
    "\041\012\040\013\046\001\001\000\014\005\073\010\034" +
    "\011\041\012\040\013\046\001\001\000\014\005\072\010" +
    "\034\011\041\012\040\013\046\001\001\000\014\005\071" +
    "\010\034\011\041\012\040\013\046\001\001\000\014\005" +
    "\070\010\034\011\041\012\040\013\046\001\001\000\014" +
    "\005\067\010\034\011\041\012\040\013\046\001\001\000" +
    "\014\005\066\010\034\011\041\012\040\013\046\001\001" +
    "\000\014\005\065\010\034\011\041\012\040\013\046\001" +
    "\001\000\014\005\064\010\034\011\041\012\040\013\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\111\010\034\011\041\012" +
    "\040\013\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\117\010\034\011\041\012\040\013\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\123\010\034\011\041\012\040\013\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\133\004\025\014\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\141\004" +
    "\025\014\011\001\001\000\002\001\001\000\010\003\143" +
    "\004\025\014\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\150" +
    "\010\034\011\041\012\040\013\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\153\004\025\014\011" +
    "\001\001\000\002\001\001\000\004\006\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\163\004\025\014" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\166\010\034\011\041\012\040\013\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\171\004\025" +
    "\014\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\174\004\025\014\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\177\010\034\011\041\012" +
    "\040\013\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\202\004\025\014\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\207\010\034\011\041\012\040\013\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\212" +
    "\004\025\014\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, (s.right-1)));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action_part00000000(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET mainstatements RIGHT_CURLY_BRACKET 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 parser.AST = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatement mainstatements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=i; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new Switch(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases DEFAULT COLON statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Switch(e, c, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new While(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new While(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= DO LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(s, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= DO LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= CONSOLE PERIOD WRITE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= error RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= error SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new If(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new If(e, s, l, null); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, l, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elseifs ::= elseifs ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		LinkedList<ElseIf> f = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = f; RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elseifs ::= ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new LinkedList<ElseIf>(); RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cases ::= cases CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = c; RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cases ::= CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = s;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = a;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = l;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = u;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbols ::= TEXT 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(t, EnumTerminals.TEXT);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // symbols ::= CHARACTER 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHARACTER);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aritmetic ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.PLUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritmetic ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MINUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritmetic ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.TIMES, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritmetic ::= expr DIVIDE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDE, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aritmetic ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.INTEGER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aritmetic ::= DECIMAL 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(d, EnumTerminals.DECIMAL); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logical ::= expr GREATER_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logical ::= expr LESS_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logical ::= expr GREATER_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logical ::= expr LESS_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logical ::= expr EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logical ::= expr NOT_EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.NOT_EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.AND, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.OR, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(b, EnumTerminals.BOOLEAN); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unitary ::= MINUS expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.MINUS); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.NOT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
              return CUP$Syntactic$do_action_part00000000(
                               CUP$Syntactic$act_num,
                               CUP$Syntactic$parser,
                               CUP$Syntactic$stack,
                               CUP$Syntactic$top);
    }
}

}
