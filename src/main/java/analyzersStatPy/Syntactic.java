
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzersStatPy;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Variable;
import instructions.Statement;
import instructions.Operation;
import instructions.Param;
import instructions.Function;
import instructions.Declaration_Assignment;
import instructions.If;
import instructions.ElseIf;
import instructions.Switch;
import instructions.Case;
import instructions.For;
import instructions.While;
import instructions.DoWhile;
import instructions.Print;
import instructions.Return;
import instructions.SearchValue;
import enums.EnumOperations;
import enums.EnumTerminals;
import enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\011\000\002\023" +
    "\004\000\002\023\003\000\002\022\003\000\002\022\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\004\007\000\002\004\006\000\002\004\003\000\002" +
    "\004\010\000\002\004\011\000\002\004\014\000\002\004" +
    "\003\000\002\004\011\000\002\004\010\000\002\004\013" +
    "\000\002\004\012\000\002\004\011\000\002\004\004\000" +
    "\002\004\004\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\006" +
    "\005\000\002\006\003\000\002\017\011\000\002\020\004" +
    "\000\002\020\003\000\002\021\005\000\002\021\007\000" +
    "\002\021\006\000\002\021\013\000\002\015\011\000\002" +
    "\015\015\000\002\015\012\000\002\015\016\000\002\007" +
    "\012\000\002\007\011\000\002\010\007\000\002\010\006" +
    "\000\002\016\021\000\002\016\020\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\012\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\014\004\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\004\005\001\002\000\004\002\325\001" +
    "\002\000\004\005\006\001\002\000\004\046\007\001\002" +
    "\000\004\047\010\001\002\000\004\050\011\001\002\000" +
    "\036\003\030\004\035\006\022\011\021\014\034\015\015" +
    "\016\025\017\020\031\024\032\013\033\036\034\014\035" +
    "\032\036\026\001\002\000\040\003\ufffd\004\ufffd\006\ufffd" +
    "\011\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\051\ufffd\001\002" +
    "\000\006\031\uffea\052\uffea\001\002\000\006\031\uffe8\052" +
    "\uffe8\001\002\000\004\046\316\001\002\000\004\031\311" +
    "\001\002\000\040\003\ufffc\004\ufffc\006\ufffc\011\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\051\ufffc\001\002\000\004\063" +
    "\303\001\002\000\004\046\260\001\002\000\004\046\223" +
    "\001\002\000\004\051\222\001\002\000\004\060\217\001" +
    "\002\000\004\050\201\001\002\000\006\031\uffe7\052\uffe7" +
    "\001\002\000\044\003\ufff6\004\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\051\ufff6\001" +
    "\002\000\006\051\200\065\177\001\002\000\044\003\ufff2" +
    "\004\ufff2\006\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\051\ufff2\001\002\000\006\031\uffe6\052" +
    "\uffe6\001\002\000\040\003\030\004\035\006\022\011\021" +
    "\014\034\015\015\016\025\017\020\031\024\032\013\033" +
    "\036\034\014\035\032\036\026\051\ufffe\001\002\000\004" +
    "\046\155\001\002\000\004\031\037\001\002\000\006\031" +
    "\uffe9\052\uffe9\001\002\000\004\046\040\001\002\000\004" +
    "\047\041\001\002\000\004\050\042\001\002\000\016\031" +
    "\045\032\013\033\036\034\014\035\032\036\026\001\002" +
    "\000\020\031\045\032\013\033\036\034\014\035\032\036" +
    "\026\051\uffe1\001\002\000\004\051\153\001\002\000\004" +
    "\060\150\001\002\000\006\031\047\052\050\001\002\000" +
    "\006\060\145\065\144\001\002\000\004\053\051\001\002" +
    "\000\004\031\052\001\002\000\004\060\053\001\002\000" +
    "\004\050\054\001\002\000\026\024\056\025\061\026\071" +
    "\027\060\030\065\031\070\041\073\043\055\046\062\071" +
    "\064\001\002\000\026\024\056\025\061\026\071\027\060" +
    "\030\065\031\070\041\073\043\055\046\062\071\064\001" +
    "\002\000\042\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\051\uffc4\054\uffc4\055\uffc4\056\uffc4\057" +
    "\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\001\002\000\042" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047" +
    "\uffd2\051\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2" +
    "\062\uffd2\064\uffd2\065\uffd2\001\002\000\042\037\uffcb\040" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\051\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\064" +
    "\uffcb\065\uffcb\001\002\000\042\037\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\047\uffc5\051\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5" +
    "\001\002\000\026\024\056\025\061\026\071\027\060\030" +
    "\065\031\070\041\073\043\055\046\062\071\064\001\002" +
    "\000\006\051\136\064\135\001\002\000\004\050\126\001" +
    "\002\000\042\037\uffbb\040\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\047\uffbb\051\uffbb\054\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\001\002\000\042" +
    "\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0" +
    "\062\uffd0\064\uffd0\065\uffd0\001\002\000\042\037\uffd1\040" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\051\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\064" +
    "\uffd1\065\uffd1\001\002\000\042\037\uffcd\040\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\047\uffcd\051\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd" +
    "\001\002\000\042\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\047\uffcc\051\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\001\002\000" +
    "\036\037\077\040\111\042\104\043\076\044\106\045\102" +
    "\051\uffe4\054\103\055\110\056\105\057\107\061\100\062" +
    "\101\064\uffe4\001\002\000\026\024\056\025\061\026\071" +
    "\027\060\030\065\031\070\041\073\043\055\046\062\071" +
    "\064\001\002\000\042\037\uffcf\040\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\047\uffcf\051\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\001\002" +
    "\000\042\037\077\040\111\042\104\043\076\044\106\045" +
    "\102\047\uffb9\051\uffb9\054\103\055\110\056\105\057\107" +
    "\061\100\062\101\064\uffb9\065\uffb9\001\002\000\026\024" +
    "\056\025\061\026\071\027\060\030\065\031\070\041\073" +
    "\043\055\046\062\071\064\001\002\000\026\024\056\025" +
    "\061\026\071\027\060\030\065\031\070\041\073\043\055" +
    "\046\062\071\064\001\002\000\026\024\056\025\061\026" +
    "\071\027\060\030\065\031\070\041\073\043\055\046\062" +
    "\071\064\001\002\000\026\024\056\025\061\026\071\027" +
    "\060\030\065\031\070\041\073\043\055\046\062\071\064" +
    "\001\002\000\026\024\056\025\061\026\071\027\060\030" +
    "\065\031\070\041\073\043\055\046\062\071\064\001\002" +
    "\000\026\024\056\025\061\026\071\027\060\030\065\031" +
    "\070\041\073\043\055\046\062\071\064\001\002\000\026" +
    "\024\056\025\061\026\071\027\060\030\065\031\070\041" +
    "\073\043\055\046\062\071\064\001\002\000\026\024\056" +
    "\025\061\026\071\027\060\030\065\031\070\041\073\043" +
    "\055\046\062\071\064\001\002\000\026\024\056\025\061" +
    "\026\071\027\060\030\065\031\070\041\073\043\055\046" +
    "\062\071\064\001\002\000\026\024\056\025\061\026\071" +
    "\027\060\030\065\031\070\041\073\043\055\046\062\071" +
    "\064\001\002\000\026\024\056\025\061\026\071\027\060" +
    "\030\065\031\070\041\073\043\055\046\062\071\064\001" +
    "\002\000\026\024\056\025\061\026\071\027\060\030\065" +
    "\031\070\041\073\043\055\046\062\071\064\001\002\000" +
    "\042\037\uffbc\040\uffbc\042\104\043\076\044\106\045\102" +
    "\047\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\061" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\001\002\000\042\037\077" +
    "\040\111\042\104\043\076\044\106\045\102\047\uffc3\051" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3" +
    "\064\uffc3\065\uffc3\001\002\000\042\037\077\040\111\042" +
    "\104\043\076\044\106\045\102\047\uffc1\051\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\064\uffc1\065" +
    "\uffc1\001\002\000\042\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\047\uffc7\051\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\001\002" +
    "\000\042\037\077\040\111\042\104\043\076\044\106\045" +
    "\102\047\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\061\uffc0\062\uffc0\064\uffc0\065\uffc0\001\002\000\042\037" +
    "\uffc9\040\uffc9\042\uffc9\043\uffc9\044\106\045\102\047\uffc9" +
    "\051\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\062" +
    "\uffc9\064\uffc9\065\uffc9\001\002\000\042\037\077\040\111" +
    "\042\104\043\076\044\106\045\102\047\uffc2\051\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2\064\uffc2" +
    "\065\uffc2\001\002\000\042\037\uffc6\040\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\047\uffc6\051\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\001" +
    "\002\000\042\037\077\040\111\042\104\043\076\044\106" +
    "\045\102\047\uffbe\051\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\001\002\000\042" +
    "\037\077\040\111\042\104\043\076\044\106\045\102\047" +
    "\uffbf\051\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf" +
    "\062\uffbf\064\uffbf\065\uffbf\001\002\000\042\037\uffbd\040" +
    "\uffbd\042\104\043\076\044\106\045\102\047\uffbd\051\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\065\uffbd\001\002\000\042\037\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\044\106\045\102\047\uffc8\051\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8" +
    "\001\002\000\004\031\127\001\002\000\004\064\130\001" +
    "\002\000\004\026\131\001\002\000\004\064\132\001\002" +
    "\000\004\026\133\001\002\000\004\051\134\001\002\000" +
    "\042\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\047\uffca\051\uffca\054\uffca\055\uffca\056\uffca\057\uffca\061" +
    "\uffca\062\uffca\064\uffca\065\uffca\001\002\000\026\024\056" +
    "\025\061\026\071\027\060\030\065\031\070\041\073\043" +
    "\055\046\062\071\064\001\002\000\004\065\137\001\002" +
    "\000\020\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\051\uffdd\001\002\000\036\037\077\040\111\042\104" +
    "\043\076\044\106\045\102\051\uffe5\054\103\055\110\056" +
    "\105\057\107\061\100\062\101\064\uffe5\001\002\000\034" +
    "\037\077\040\111\042\104\043\076\044\106\045\102\047" +
    "\142\054\103\055\110\056\105\057\107\061\100\062\101" +
    "\001\002\000\042\037\uffce\040\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\047\uffce\051\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\061\uffce\062\uffce\064\uffce\065\uffce\001\002\000" +
    "\042\037\uffba\040\uffba\042\uffba\043\uffba\044\106\045\102" +
    "\047\uffba\051\uffba\054\uffba\055\uffba\056\uffba\057\uffba\061" +
    "\uffba\062\uffba\064\uffba\065\uffba\001\002\000\020\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\051\uffe0\001" +
    "\002\000\026\024\056\025\061\026\071\027\060\030\065" +
    "\031\070\041\073\043\055\046\062\071\064\001\002\000" +
    "\034\037\077\040\111\042\104\043\076\044\106\045\102" +
    "\054\103\055\110\056\105\057\107\061\100\062\101\065" +
    "\147\001\002\000\020\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\051\uffdf\001\002\000\026\024\056\025" +
    "\061\026\071\027\060\030\065\031\070\041\073\043\055" +
    "\046\062\071\064\001\002\000\034\037\077\040\111\042" +
    "\104\043\076\044\106\045\102\054\103\055\110\056\105" +
    "\057\107\061\100\062\101\065\152\001\002\000\020\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\051\uffde" +
    "\001\002\000\040\003\uffe3\004\uffe3\006\uffe3\011\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\051\uffe3\001\002\000\004\051" +
    "\uffe2\001\002\000\004\032\156\001\002\000\004\031\157" +
    "\001\002\000\004\060\160\001\002\000\004\025\161\001" +
    "\002\000\004\065\162\001\002\000\026\024\056\025\061" +
    "\026\071\027\060\030\065\031\070\041\073\043\055\046" +
    "\062\071\064\001\002\000\034\037\077\040\111\042\104" +
    "\043\076\044\106\045\102\054\103\055\110\056\105\057" +
    "\107\061\100\062\101\065\164\001\002\000\004\031\165" +
    "\001\002\000\004\067\166\001\002\000\004\047\167\001" +
    "\002\000\004\050\170\001\002\000\036\003\030\006\022" +
    "\011\021\014\034\015\015\016\025\017\020\031\024\032" +
    "\013\033\036\034\014\035\032\036\026\051\172\001\002" +
    "\000\042\003\030\006\022\011\021\012\ufffa\013\ufffa\014" +
    "\034\015\015\016\025\017\020\031\024\032\013\033\036" +
    "\034\014\035\032\036\026\051\ufffa\001\002\000\044\003" +
    "\uffd3\004\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\051\uffd3\001\002\000\004\051\174" +
    "\001\002\000\044\003\uffd4\004\uffd4\006\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\051\uffd4\001" +
    "\002\000\010\012\ufffb\013\ufffb\051\ufffb\001\002\000\004" +
    "\051\uffff\001\002\000\044\003\uffeb\004\uffeb\006\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\051" +
    "\uffeb\001\002\000\044\003\uffec\004\uffec\006\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\051\uffec" +
    "\001\002\000\036\003\030\006\022\011\021\014\034\015" +
    "\015\016\025\017\020\031\024\032\013\033\036\034\014" +
    "\035\032\036\026\051\202\001\002\000\004\015\212\001" +
    "\002\000\004\051\204\001\002\000\004\015\205\001\002" +
    "\000\004\046\206\001\002\000\026\024\056\025\061\026" +
    "\071\027\060\030\065\031\070\041\073\043\055\046\062" +
    "\071\064\001\002\000\034\037\077\040\111\042\104\043" +
    "\076\044\106\045\102\047\210\054\103\055\110\056\105" +
    "\057\107\061\100\062\101\001\002\000\004\065\211\001" +
    "\002\000\044\003\uffef\004\uffef\006\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\051\uffef\001\002" +
    "\000\004\046\213\001\002\000\026\024\056\025\061\026" +
    "\071\027\060\030\065\031\070\041\073\043\055\046\062" +
    "\071\064\001\002\000\034\037\077\040\111\042\104\043" +
    "\076\044\106\045\102\047\215\054\103\055\110\056\105" +
    "\057\107\061\100\062\101\001\002\000\004\065\216\001" +
    "\002\000\044\003\uffee\004\uffee\006\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\051\uffee\001\002" +
    "\000\026\024\056\025\061\026\071\027\060\030\065\031" +
    "\070\041\073\043\055\046\062\071\064\001\002\000\034" +
    "\037\077\040\111\042\104\043\076\044\106\045\102\054" +
    "\103\055\110\056\105\057\107\061\100\062\101\065\221" +
    "\001\002\000\044\003\ufff7\004\ufff7\006\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\051\ufff7\001" +
    "\002\000\004\002\000\001\002\000\026\024\056\025\061" +
    "\026\071\027\060\030\065\031\070\041\073\043\055\046" +
    "\062\071\064\001\002\000\034\037\077\040\111\042\104" +
    "\043\076\044\106\045\102\047\225\054\103\055\110\056" +
    "\105\057\107\061\100\062\101\001\002\000\004\050\226" +
    "\001\002\000\034\003\030\006\022\011\021\014\034\015" +
    "\015\016\025\017\020\031\024\032\013\033\036\034\014" +
    "\035\032\036\026\001\002\000\004\051\230\001\002\000" +
    "\050\003\uffdc\004\uffdc\006\uffdc\007\231\010\232\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\051\uffdc" +
    "\001\002\000\004\046\252\001\002\000\004\050\247\001" +
    "\002\000\050\003\uffda\004\uffda\006\uffda\007\234\010\235" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\051\uffda\001\002\000\004\046\241\001\002\000\004\050" +
    "\236\001\002\000\034\003\030\006\022\011\021\014\034" +
    "\015\015\016\025\017\020\031\024\032\013\033\036\034" +
    "\014\035\032\036\026\001\002\000\004\051\240\001\002" +
    "\000\044\003\uffd9\004\uffd9\006\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\051\uffd9\001\002\000" +
    "\026\024\056\025\061\026\071\027\060\030\065\031\070" +
    "\041\073\043\055\046\062\071\064\001\002\000\034\037" +
    "\077\040\111\042\104\043\076\044\106\045\102\047\243" +
    "\054\103\055\110\056\105\057\107\061\100\062\101\001" +
    "\002\000\004\050\244\001\002\000\034\003\030\006\022" +
    "\011\021\014\034\015\015\016\025\017\020\031\024\032" +
    "\013\033\036\034\014\035\032\036\026\001\002\000\004" +
    "\051\246\001\002\000\050\003\uffd8\004\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\051\uffd8\001\002\000\034\003\030\006\022" +
    "\011\021\014\034\015\015\016\025\017\020\031\024\032" +
    "\013\033\036\034\014\035\032\036\026\001\002\000\004" +
    "\051\251\001\002\000\044\003\uffdb\004\uffdb\006\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\051" +
    "\uffdb\001\002\000\026\024\056\025\061\026\071\027\060" +
    "\030\065\031\070\041\073\043\055\046\062\071\064\001" +
    "\002\000\034\037\077\040\111\042\104\043\076\044\106" +
    "\045\102\047\254\054\103\055\110\056\105\057\107\061" +
    "\100\062\101\001\002\000\004\050\255\001\002\000\034" +
    "\003\030\006\022\011\021\014\034\015\015\016\025\017" +
    "\020\031\024\032\013\033\036\034\014\035\032\036\026" +
    "\001\002\000\004\051\257\001\002\000\050\003\uffd7\004" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\051\uffd7\001\002\000\026" +
    "\024\056\025\061\026\071\027\060\030\065\031\070\041" +
    "\073\043\055\046\062\071\064\001\002\000\034\037\077" +
    "\040\111\042\104\043\076\044\106\045\102\047\262\054" +
    "\103\055\110\056\105\057\107\061\100\062\101\001\002" +
    "\000\004\050\263\001\002\000\006\012\266\051\264\001" +
    "\002\000\044\003\ufff5\004\ufff5\006\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\051\ufff5\001\002" +
    "\000\010\012\274\013\272\051\273\001\002\000\004\025" +
    "\267\001\002\000\004\066\270\001\002\000\034\003\030" +
    "\006\022\011\021\014\034\015\015\016\025\017\020\031" +
    "\024\032\013\033\036\034\014\035\032\036\026\001\002" +
    "\000\010\012\uffd5\013\uffd5\051\uffd5\001\002\000\004\066" +
    "\300\001\002\000\044\003\ufff4\004\ufff4\006\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\051\ufff4" +
    "\001\002\000\004\025\275\001\002\000\004\066\276\001" +
    "\002\000\034\003\030\006\022\011\021\014\034\015\015" +
    "\016\025\017\020\031\024\032\013\033\036\034\014\035" +
    "\032\036\026\001\002\000\010\012\uffd6\013\uffd6\051\uffd6" +
    "\001\002\000\034\003\030\006\022\011\021\014\034\015" +
    "\015\016\025\017\020\031\024\032\013\033\036\034\014" +
    "\035\032\036\026\001\002\000\004\051\302\001\002\000" +
    "\044\003\ufff3\004\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\051\ufff3\001\002\000\004" +
    "\020\304\001\002\000\004\046\305\001\002\000\026\024" +
    "\056\025\061\026\071\027\060\030\065\031\070\041\073" +
    "\043\055\046\062\071\064\001\002\000\034\037\077\040" +
    "\111\042\104\043\076\044\106\045\102\047\307\054\103" +
    "\055\110\056\105\057\107\061\100\062\101\001\002\000" +
    "\004\065\310\001\002\000\044\003\uffed\004\uffed\006\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\051\uffed\001\002\000\006\060\313\065\312\001\002\000" +
    "\044\003\ufff9\004\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\051\ufff9\001\002\000\026" +
    "\024\056\025\061\026\071\027\060\030\065\031\070\041" +
    "\073\043\055\046\062\071\064\001\002\000\034\037\077" +
    "\040\111\042\104\043\076\044\106\045\102\054\103\055" +
    "\110\056\105\057\107\061\100\062\101\065\315\001\002" +
    "\000\044\003\ufff8\004\ufff8\006\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\051\ufff8\001\002\000" +
    "\026\024\056\025\061\026\071\027\060\030\065\031\070" +
    "\041\073\043\055\046\062\071\064\001\002\000\034\037" +
    "\077\040\111\042\104\043\076\044\106\045\102\047\320" +
    "\054\103\055\110\056\105\057\107\061\100\062\101\001" +
    "\002\000\004\050\321\001\002\000\036\003\030\006\022" +
    "\011\021\014\034\015\015\016\025\017\020\031\024\032" +
    "\013\033\036\034\014\035\032\036\026\051\322\001\002" +
    "\000\044\003\ufff0\004\ufff0\006\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\051\ufff0\001\002\000" +
    "\004\051\324\001\002\000\044\003\ufff1\004\ufff1\006\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\051\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\011\015\026\016\030\017\016\022" +
    "\032\023\022\024\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\011\015\026\016\030\017\016\022\032\023\175\024\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\043\021\042\024\045\001\001\000\010\020" +
    "\153\021\042\024\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\071\006\062\011\066\012\065\013\056\014" +
    "\073\001\001\000\014\005\142\011\066\012\065\013\056" +
    "\014\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\140\011\066" +
    "\012\065\013\056\014\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\074\011\066\012\065\013\056\014\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\124\011\066\012\065\013\056\014\073\001\001\000\014" +
    "\005\123\011\066\012\065\013\056\014\073\001\001\000" +
    "\014\005\122\011\066\012\065\013\056\014\073\001\001" +
    "\000\014\005\121\011\066\012\065\013\056\014\073\001" +
    "\001\000\014\005\120\011\066\012\065\013\056\014\073" +
    "\001\001\000\014\005\117\011\066\012\065\013\056\014" +
    "\073\001\001\000\014\005\116\011\066\012\065\013\056" +
    "\014\073\001\001\000\014\005\115\011\066\012\065\013" +
    "\056\014\073\001\001\000\014\005\114\011\066\012\065" +
    "\013\056\014\073\001\001\000\014\005\113\011\066\012" +
    "\065\013\056\014\073\001\001\000\014\005\112\011\066" +
    "\012\065\013\056\014\073\001\001\000\014\005\111\011" +
    "\066\012\065\013\056\014\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\137\011\066" +
    "\012\065\013\056\014\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\145\011\066\012\065\013\056\014\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\150\011\066\012" +
    "\065\013\056\014\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\162\011\066\012\065\013" +
    "\056\014\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\172\004\170\015\026\016\030\024\015\001\001" +
    "\000\014\003\174\004\170\015\026\016\030\024\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\202\004\170\015\026\016\030" +
    "\024\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\206\011\066" +
    "\012\065\013\056\014\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\213\011\066\012\065\013\056\014\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\217\011\066\012\065\013\056\014\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\223\011\066\012\065\013\056\014\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\226\004\170" +
    "\015\026\016\030\024\015\001\001\000\002\001\001\000" +
    "\004\007\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\236\004\170\015\026\016\030\024\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\241\011" +
    "\066\012\065\013\056\014\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\244\004\170\015\026\016" +
    "\030\024\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\247\004\170\015\026\016\030\024\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\252" +
    "\011\066\012\065\013\056\014\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\255\004\170\015\026" +
    "\016\030\024\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\260\011\066\012\065\013\056\014\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\270\004\170\015" +
    "\026\016\030\024\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\276\004\170\015\026\016\030\024\015" +
    "\001\001\000\002\001\001\000\014\003\300\004\170\015" +
    "\026\016\030\024\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\305\011\066\012\065\013\056\014\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\313\011\066\012\065" +
    "\013\056\014\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\316\011\066\012\065\013\056\014\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\322\004\170\015\026\016\030\024\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();
    public LinkedList<Variable> variables = new LinkedList<>();
    public LinkedList<Variable> variables_json = new LinkedList<>();

    public void setValues (LinkedList<Variable> variablesjson) {
        variables_json = variablesjson;
    }

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, (s.right-1)));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action_part00000000(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET mainstatements RIGHT_CURLY_BRACKET 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 parser.AST = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatement mainstatements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainstatement ::= function 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = f; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= data_type ID SEMI_COLON 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= data_type ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=i; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new Switch(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases DEFAULT COLON statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Switch(e, c, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= for 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=f; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new While(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new While(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= DO LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(s, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= DO LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= CONSOLE PERIOD WRITE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= error RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= error SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(d); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(c); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_type ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // data_type ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_list ::= expr_list COMMA expr 
            {
              LinkedList<Operation> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Operation> l = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = l; RESULT.add(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_list ::= expr 
            {
              LinkedList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Operation>(); RESULT.add(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= VOID ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET funcstatements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Declaration_Assignment> f = (LinkedList<Declaration_Assignment>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Function(i, f, variables, variables_json); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcstatements ::= funcstatement funcstatements 
            {
              LinkedList<Declaration_Assignment> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Declaration_Assignment f = (Declaration_Assignment)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Declaration_Assignment> s = (LinkedList<Declaration_Assignment>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; RESULT.add(f); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatements",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcstatements ::= funcstatement 
            {
              LinkedList<Declaration_Assignment> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Declaration_Assignment f = (Declaration_Assignment)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Declaration_Assignment>(); RESULT.add(f); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatements",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcstatement ::= data_type ID SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcstatement ::= data_type ID EQUAL expr SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); variables.add(new Variable(i, e, "")); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcstatement ::= ID EQUAL expr SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcstatement ::= data_type LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET ID EQUAL LEFT_CURLY_BRACKET expr_list RIGHT_CURLY_BRACKET SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Operation> l = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Declaration_Assignment(i, l); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new If(e, s, l, null); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, l, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elseifs ::= elseifs ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		LinkedList<ElseIf> f = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = f; RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elseifs ::= ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new LinkedList<ElseIf>(); RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cases ::= cases CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = c; RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cases ::= CASE INTEGER COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON ID INCREASE RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new For(i, n, e, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-14)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON ID INCREASE RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		 RESULT = new For(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-13)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = a; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = l; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = u; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.ID); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // symbols ::= TEXT 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(t, EnumTerminals.TEXT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // symbols ::= CHARACTER 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(c, EnumTerminals.CHARACTER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // symbols ::= DOLLAR LEFT_CURLY_BRACKET ID COMMA TEXT COMMA TEXT RIGHT_CURLY_BRACKET 
            {
              Operation RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 SearchValue val = new SearchValue(variables_json, String.valueOf(p), String.valueOf(i)); RESULT = new Operation(val.getValue(), val.getTypeTerminal()); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // aritmetic ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.PLUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aritmetic ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MINUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aritmetic ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.TIMES, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aritmetic ::= expr DIVIDE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDE, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aritmetic ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.INTEGER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aritmetic ::= DECIMAL 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(d, EnumTerminals.DECIMAL); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logical ::= expr GREATER_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logical ::= expr LESS_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logical ::= expr GREATER_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logical ::= expr LESS_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logical ::= expr EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logical ::= expr NOT_EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.NOT_EQUAL_TO, b);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.AND, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.OR, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(b, EnumTerminals.BOOLEAN); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unitary ::= MINUS expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.MINUS); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.NOT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
              return CUP$Syntactic$do_action_part00000000(
                               CUP$Syntactic$act_num,
                               CUP$Syntactic$parser,
                               CUP$Syntactic$stack,
                               CUP$Syntactic$top);
    }
}

}
