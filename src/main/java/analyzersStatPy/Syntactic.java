
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzersStatPy;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Variable;
import instructions.Statement;
import instructions.Operation;
import instructions.Function;
import instructions.Declaration_Assignment;
import instructions.If;
import instructions.ElseIf;
import instructions.Switch;
import instructions.Case;
import instructions.For;
import instructions.While;
import instructions.DoWhile;
import instructions.Print;
import instructions.SearchValue;
import enums.EnumOperations;
import enums.EnumUnitaryOperations;
import enums.EnumTerminals;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntactic extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\011\000\002\024" +
    "\004\000\002\024\003\000\002\023\003\000\002\023\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\004\007\000\002\004\006\000\002\004\003\000\002" +
    "\004\010\000\002\004\011\000\002\004\014\000\002\004" +
    "\003\000\002\004\011\000\002\004\010\000\002\004\013" +
    "\000\002\004\012\000\002\004\011\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\006\005\000\002\006\003" +
    "\000\002\020\011\000\002\021\004\000\002\021\003\000" +
    "\002\022\005\000\002\022\007\000\002\022\006\000\002" +
    "\022\013\000\002\016\011\000\002\016\015\000\002\016" +
    "\012\000\002\016\016\000\002\007\012\000\002\007\011" +
    "\000\002\010\007\000\002\010\006\000\002\017\020\000" +
    "\002\017\017\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\012\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\014\005\000\002\014\005\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\004\005\001\002\000\004\002\333\001" +
    "\002\000\004\005\006\001\002\000\004\045\007\001\002" +
    "\000\004\046\010\001\002\000\004\047\011\001\002\000" +
    "\042\003\032\004\037\006\023\011\022\014\036\015\016" +
    "\016\026\017\021\021\012\022\031\030\025\031\014\032" +
    "\040\033\015\034\034\035\027\001\002\000\004\064\332" +
    "\001\002\000\044\003\ufffd\004\ufffd\006\ufffd\011\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\022\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\050\ufffd\001" +
    "\002\000\006\030\uffe8\051\uffe8\001\002\000\006\030\uffe6" +
    "\051\uffe6\001\002\000\004\045\323\001\002\000\004\030" +
    "\316\001\002\000\044\003\ufffc\004\ufffc\006\ufffc\011\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\050\ufffc" +
    "\001\002\000\004\062\310\001\002\000\004\045\265\001" +
    "\002\000\004\045\230\001\002\000\004\050\227\001\002" +
    "\000\004\057\224\001\002\000\004\047\206\001\002\000" +
    "\006\030\uffe5\051\uffe5\001\002\000\050\003\ufff6\004\ufff6" +
    "\006\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\050\ufff6\001\002\000\004\064" +
    "\205\001\002\000\006\050\204\064\203\001\002\000\050" +
    "\003\ufff2\004\ufff2\006\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\050\ufff2\001" +
    "\002\000\006\030\uffe4\051\uffe4\001\002\000\044\003\032" +
    "\004\037\006\023\011\022\014\036\015\016\016\026\017" +
    "\021\021\012\022\031\030\025\031\014\032\040\033\015" +
    "\034\034\035\027\050\ufffe\001\002\000\004\045\162\001" +
    "\002\000\004\030\041\001\002\000\006\030\uffe7\051\uffe7" +
    "\001\002\000\004\045\042\001\002\000\004\046\043\001" +
    "\002\000\004\047\044\001\002\000\016\030\047\031\014" +
    "\032\040\033\015\034\034\035\027\001\002\000\020\030" +
    "\047\031\014\032\040\033\015\034\034\035\027\050\uffdf" +
    "\001\002\000\004\050\160\001\002\000\004\057\155\001" +
    "\002\000\006\030\051\051\052\001\002\000\006\057\152" +
    "\064\151\001\002\000\004\052\053\001\002\000\004\030" +
    "\054\001\002\000\004\057\055\001\002\000\004\047\056" +
    "\001\002\000\026\023\060\024\062\025\074\026\063\027" +
    "\067\030\073\040\076\042\057\045\064\070\066\001\002" +
    "\000\026\023\060\024\062\025\074\026\063\027\067\030" +
    "\073\040\076\042\057\045\064\070\066\001\002\000\050" +
    "\036\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046" +
    "\uffc6\050\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001" +
    "\002\000\050\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\046\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\060\uffd0\061\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\001\002\000\050\036\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\046\uffc7\050\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\061\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\001\002\000\050\036\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\050\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\001\002\000\026\023" +
    "\060\024\062\025\074\026\063\027\067\030\073\040\076" +
    "\042\057\045\064\070\066\001\002\000\006\050\143\063" +
    "\142\001\002\000\004\047\133\001\002\000\050\036\uffc5" +
    "\037\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\050" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002\000" +
    "\050\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\060" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\001\002\000\050\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\050\uffcf\053\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\060\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\001\002\000\050\036\uffce\037\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\046\uffce\050\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\060\uffce\061\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\001\002\000\050\036\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\046\uffca\050\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\060\uffca\061\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001\002\000\050" +
    "\036\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\046" +
    "\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9" +
    "\061\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001" +
    "\002\000\042\036\101\037\116\041\107\042\102\043\111" +
    "\044\105\050\uffe2\053\106\054\113\055\110\056\112\060" +
    "\103\061\104\063\uffe2\066\115\067\114\001\002\000\026" +
    "\023\060\024\062\025\074\026\063\027\067\030\073\040" +
    "\076\042\057\045\064\070\066\001\002\000\050\036\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\050" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002\000" +
    "\050\036\101\037\116\041\107\042\102\043\111\044\105" +
    "\046\uffb6\050\uffb6\053\106\054\113\055\110\056\112\060" +
    "\103\061\104\063\uffb6\064\uffb6\065\uffb6\066\115\067\114" +
    "\001\002\000\026\023\060\024\062\025\074\026\063\027" +
    "\067\030\073\040\076\042\057\045\064\070\066\001\002" +
    "\000\026\023\060\024\062\025\074\026\063\027\067\030" +
    "\073\040\076\042\057\045\064\070\066\001\002\000\026" +
    "\023\060\024\062\025\074\026\063\027\067\030\073\040" +
    "\076\042\057\045\064\070\066\001\002\000\026\023\060" +
    "\024\062\025\074\026\063\027\067\030\073\040\076\042" +
    "\057\045\064\070\066\001\002\000\026\023\060\024\062" +
    "\025\074\026\063\027\067\030\073\040\076\042\057\045" +
    "\064\070\066\001\002\000\026\023\060\024\062\025\074" +
    "\026\063\027\067\030\073\040\076\042\057\045\064\070" +
    "\066\001\002\000\026\023\060\024\062\025\074\026\063" +
    "\027\067\030\073\040\076\042\057\045\064\070\066\001" +
    "\002\000\026\023\060\024\062\025\074\026\063\027\067" +
    "\030\073\040\076\042\057\045\064\070\066\001\002\000" +
    "\026\023\060\024\062\025\074\026\063\027\067\030\073" +
    "\040\076\042\057\045\064\070\066\001\002\000\026\023" +
    "\060\024\062\025\074\026\063\027\067\030\073\040\076" +
    "\042\057\045\064\070\066\001\002\000\026\023\060\024" +
    "\062\025\074\026\063\027\067\030\073\040\076\042\057" +
    "\045\064\070\066\001\002\000\050\036\uffb4\037\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\050\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000\050\036\uffb5" +
    "\037\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\050" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000" +
    "\026\023\060\024\062\025\074\026\063\027\067\030\073" +
    "\040\076\042\057\045\064\070\066\001\002\000\050\036" +
    "\uffb8\037\uffb8\041\107\042\102\043\111\044\105\046\uffb8" +
    "\050\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\115\067\114\001\002" +
    "\000\050\036\101\037\116\041\107\042\102\043\111\044" +
    "\105\046\uffbf\050\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\060\uffbf\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066\115\067" +
    "\114\001\002\000\050\036\101\037\116\041\107\042\102" +
    "\043\111\044\105\046\uffbd\050\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\060\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\115\067\114\001\002\000\050\036\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\050\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\001\002\000\050\036\101" +
    "\037\116\041\107\042\102\043\111\044\105\046\uffbc\050" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\115\067\114\001\002\000" +
    "\050\036\uffc3\037\uffc3\041\uffc3\042\uffc3\043\111\044\105" +
    "\046\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060" +
    "\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\001\002\000\050\036\101\037\116\041\107\042\102\043" +
    "\111\044\105\046\uffbe\050\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\060\uffbe\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\115\067\114\001\002\000\050\036\uffc0\037\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\046\uffc0\050\uffc0\053\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\001\002\000\050\036\101\037" +
    "\116\041\107\042\102\043\111\044\105\046\uffba\050\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\115\067\114\001\002\000\050" +
    "\036\101\037\116\041\107\042\102\043\111\044\105\046" +
    "\uffbb\050\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb" +
    "\061\uffbb\063\uffbb\064\uffbb\065\uffbb\066\115\067\114\001" +
    "\002\000\050\036\uffc2\037\uffc2\041\uffc2\042\uffc2\043\111" +
    "\044\105\046\uffc2\050\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\001\002\000\050\036\uffb9\037\uffb9\041\107\042" +
    "\102\043\111\044\105\046\uffb9\050\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\066\115\067\114\001\002\000\004\030\134\001\002" +
    "\000\004\063\135\001\002\000\004\025\136\001\002\000" +
    "\004\063\137\001\002\000\004\025\140\001\002\000\004" +
    "\050\141\001\002\000\050\036\uffc4\037\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\046\uffc4\050\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\001\002\000\026\023\060\024\062" +
    "\025\074\026\063\027\067\030\073\040\076\042\057\045" +
    "\064\070\066\001\002\000\004\064\144\001\002\000\020" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\050" +
    "\uffdb\001\002\000\042\036\101\037\116\041\107\042\102" +
    "\043\111\044\105\050\uffe3\053\106\054\113\055\110\056" +
    "\112\060\103\061\104\063\uffe3\066\115\067\114\001\002" +
    "\000\040\036\101\037\116\041\107\042\102\043\111\044" +
    "\105\046\147\053\106\054\113\055\110\056\112\060\103" +
    "\061\104\066\115\067\114\001\002\000\050\036\uffcb\037" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\050\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\050" +
    "\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\111\044\105\046" +
    "\uffb7\050\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7" +
    "\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001" +
    "\002\000\020\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\050\uffde\001\002\000\026\023\060\024\062\025" +
    "\074\026\063\027\067\030\073\040\076\042\057\045\064" +
    "\070\066\001\002\000\040\036\101\037\116\041\107\042" +
    "\102\043\111\044\105\053\106\054\113\055\110\056\112" +
    "\060\103\061\104\064\154\066\115\067\114\001\002\000" +
    "\020\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\050\uffdd\001\002\000\026\023\060\024\062\025\074\026" +
    "\063\027\067\030\073\040\076\042\057\045\064\070\066" +
    "\001\002\000\040\036\101\037\116\041\107\042\102\043" +
    "\111\044\105\053\106\054\113\055\110\056\112\060\103" +
    "\061\104\064\157\066\115\067\114\001\002\000\020\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\050\uffdc" +
    "\001\002\000\044\003\uffe1\004\uffe1\006\uffe1\011\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\050\uffe1\001" +
    "\002\000\004\050\uffe0\001\002\000\004\031\163\001\002" +
    "\000\004\030\164\001\002\000\004\057\165\001\002\000" +
    "\004\024\166\001\002\000\004\064\167\001\002\000\026" +
    "\023\060\024\062\025\074\026\063\027\067\030\073\040" +
    "\076\042\057\045\064\070\066\001\002\000\040\036\101" +
    "\037\116\041\107\042\102\043\111\044\105\053\106\054" +
    "\113\055\110\056\112\060\103\061\104\064\171\066\115" +
    "\067\114\001\002\000\026\023\060\024\062\025\074\026" +
    "\063\027\067\030\073\040\076\042\057\045\064\070\066" +
    "\001\002\000\040\036\101\037\116\041\107\042\102\043" +
    "\111\044\105\046\173\053\106\054\113\055\110\056\112" +
    "\060\103\061\104\066\115\067\114\001\002\000\004\047" +
    "\174\001\002\000\042\003\032\006\023\011\022\014\036" +
    "\015\016\016\026\017\021\021\012\022\031\030\025\031" +
    "\014\032\040\033\015\034\034\035\027\050\176\001\002" +
    "\000\046\003\032\006\023\011\022\012\ufffa\013\ufffa\014" +
    "\036\015\016\016\026\017\021\021\012\022\031\030\025" +
    "\031\014\032\040\033\015\034\034\035\027\050\ufffa\001" +
    "\002\000\050\003\uffd1\004\uffd1\006\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\050\uffd1\001\002\000\004\050\200\001\002\000\050\003" +
    "\uffd2\004\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\050\uffd2\001\002" +
    "\000\010\012\ufffb\013\ufffb\050\ufffb\001\002\000\004\050" +
    "\uffff\001\002\000\050\003\uffe9\004\uffe9\006\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\050\uffe9\001\002\000\050\003\uffea\004\uffea\006" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\021\uffea\022\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\050\uffea\001\002\000\050\003\uffeb" +
    "\004\uffeb\006\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\050\uffeb\001\002\000" +
    "\042\003\032\006\023\011\022\014\036\015\016\016\026" +
    "\017\021\021\012\022\031\030\025\031\014\032\040\033" +
    "\015\034\034\035\027\050\207\001\002\000\004\015\217" +
    "\001\002\000\004\050\211\001\002\000\004\015\212\001" +
    "\002\000\004\045\213\001\002\000\026\023\060\024\062" +
    "\025\074\026\063\027\067\030\073\040\076\042\057\045" +
    "\064\070\066\001\002\000\040\036\101\037\116\041\107" +
    "\042\102\043\111\044\105\046\215\053\106\054\113\055" +
    "\110\056\112\060\103\061\104\066\115\067\114\001\002" +
    "\000\004\064\216\001\002\000\050\003\uffef\004\uffef\006" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\021\uffef\022\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\050\uffef\001\002\000\004\045\220" +
    "\001\002\000\026\023\060\024\062\025\074\026\063\027" +
    "\067\030\073\040\076\042\057\045\064\070\066\001\002" +
    "\000\040\036\101\037\116\041\107\042\102\043\111\044" +
    "\105\046\222\053\106\054\113\055\110\056\112\060\103" +
    "\061\104\066\115\067\114\001\002\000\004\064\223\001" +
    "\002\000\050\003\uffee\004\uffee\006\uffee\011\uffee\012\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\050\uffee\001\002\000\026\023\060\024\062\025\074\026" +
    "\063\027\067\030\073\040\076\042\057\045\064\070\066" +
    "\001\002\000\040\036\101\037\116\041\107\042\102\043" +
    "\111\044\105\053\106\054\113\055\110\056\112\060\103" +
    "\061\104\064\226\066\115\067\114\001\002\000\050\003" +
    "\ufff7\004\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\050\ufff7\001\002" +
    "\000\004\002\000\001\002\000\026\023\060\024\062\025" +
    "\074\026\063\027\067\030\073\040\076\042\057\045\064" +
    "\070\066\001\002\000\040\036\101\037\116\041\107\042" +
    "\102\043\111\044\105\046\232\053\106\054\113\055\110" +
    "\056\112\060\103\061\104\066\115\067\114\001\002\000" +
    "\004\047\233\001\002\000\040\003\032\006\023\011\022" +
    "\014\036\015\016\016\026\017\021\021\012\022\031\030" +
    "\025\031\014\032\040\033\015\034\034\035\027\001\002" +
    "\000\004\050\235\001\002\000\054\003\uffda\004\uffda\006" +
    "\uffda\007\236\010\237\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\050\uffda\001\002" +
    "\000\004\045\257\001\002\000\004\047\254\001\002\000" +
    "\054\003\uffd8\004\uffd8\006\uffd8\007\242\010\241\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\050\uffd8\001\002\000\004\047\251\001\002\000" +
    "\004\045\243\001\002\000\026\023\060\024\062\025\074" +
    "\026\063\027\067\030\073\040\076\042\057\045\064\070" +
    "\066\001\002\000\040\036\101\037\116\041\107\042\102" +
    "\043\111\044\105\046\245\053\106\054\113\055\110\056" +
    "\112\060\103\061\104\066\115\067\114\001\002\000\004" +
    "\047\246\001\002\000\040\003\032\006\023\011\022\014" +
    "\036\015\016\016\026\017\021\021\012\022\031\030\025" +
    "\031\014\032\040\033\015\034\034\035\027\001\002\000" +
    "\004\050\250\001\002\000\054\003\uffd6\004\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\050\uffd6\001\002\000" +
    "\040\003\032\006\023\011\022\014\036\015\016\016\026" +
    "\017\021\021\012\022\031\030\025\031\014\032\040\033" +
    "\015\034\034\035\027\001\002\000\004\050\253\001\002" +
    "\000\050\003\uffd7\004\uffd7\006\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\050" +
    "\uffd7\001\002\000\040\003\032\006\023\011\022\014\036" +
    "\015\016\016\026\017\021\021\012\022\031\030\025\031" +
    "\014\032\040\033\015\034\034\035\027\001\002\000\004" +
    "\050\256\001\002\000\050\003\uffd9\004\uffd9\006\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\050\uffd9\001\002\000\026\023\060\024\062" +
    "\025\074\026\063\027\067\030\073\040\076\042\057\045" +
    "\064\070\066\001\002\000\040\036\101\037\116\041\107" +
    "\042\102\043\111\044\105\046\261\053\106\054\113\055" +
    "\110\056\112\060\103\061\104\066\115\067\114\001\002" +
    "\000\004\047\262\001\002\000\040\003\032\006\023\011" +
    "\022\014\036\015\016\016\026\017\021\021\012\022\031" +
    "\030\025\031\014\032\040\033\015\034\034\035\027\001" +
    "\002\000\004\050\264\001\002\000\054\003\uffd5\004\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\050\uffd5\001" +
    "\002\000\026\023\060\024\062\025\074\026\063\027\067" +
    "\030\073\040\076\042\057\045\064\070\066\001\002\000" +
    "\040\036\101\037\116\041\107\042\102\043\111\044\105" +
    "\046\267\053\106\054\113\055\110\056\112\060\103\061" +
    "\104\066\115\067\114\001\002\000\004\047\270\001\002" +
    "\000\006\012\273\050\271\001\002\000\050\003\ufff5\004" +
    "\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\021\ufff5\022\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\050\ufff5\001\002\000\010" +
    "\012\301\013\277\050\300\001\002\000\026\023\060\024" +
    "\062\025\074\026\063\027\067\030\073\040\076\042\057" +
    "\045\064\070\066\001\002\000\040\036\101\037\116\041" +
    "\107\042\102\043\111\044\105\053\106\054\113\055\110" +
    "\056\112\060\103\061\104\065\275\066\115\067\114\001" +
    "\002\000\040\003\032\006\023\011\022\014\036\015\016" +
    "\016\026\017\021\021\012\022\031\030\025\031\014\032" +
    "\040\033\015\034\034\035\027\001\002\000\010\012\uffd3" +
    "\013\uffd3\050\uffd3\001\002\000\004\065\305\001\002\000" +
    "\050\003\ufff4\004\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\050\ufff4" +
    "\001\002\000\026\023\060\024\062\025\074\026\063\027" +
    "\067\030\073\040\076\042\057\045\064\070\066\001\002" +
    "\000\040\036\101\037\116\041\107\042\102\043\111\044" +
    "\105\053\106\054\113\055\110\056\112\060\103\061\104" +
    "\065\303\066\115\067\114\001\002\000\040\003\032\006" +
    "\023\011\022\014\036\015\016\016\026\017\021\021\012" +
    "\022\031\030\025\031\014\032\040\033\015\034\034\035" +
    "\027\001\002\000\010\012\uffd4\013\uffd4\050\uffd4\001\002" +
    "\000\040\003\032\006\023\011\022\014\036\015\016\016" +
    "\026\017\021\021\012\022\031\030\025\031\014\032\040" +
    "\033\015\034\034\035\027\001\002\000\004\050\307\001" +
    "\002\000\050\003\ufff3\004\ufff3\006\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\050\ufff3\001\002\000\004\020\311\001\002\000\004\045" +
    "\312\001\002\000\026\023\060\024\062\025\074\026\063" +
    "\027\067\030\073\040\076\042\057\045\064\070\066\001" +
    "\002\000\040\036\101\037\116\041\107\042\102\043\111" +
    "\044\105\046\314\053\106\054\113\055\110\056\112\060" +
    "\103\061\104\066\115\067\114\001\002\000\004\064\315" +
    "\001\002\000\050\003\uffed\004\uffed\006\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed" +
    "\022\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\050\uffed\001\002\000\006\057\320\064\317\001\002" +
    "\000\050\003\ufff9\004\ufff9\006\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\050" +
    "\ufff9\001\002\000\026\023\060\024\062\025\074\026\063" +
    "\027\067\030\073\040\076\042\057\045\064\070\066\001" +
    "\002\000\040\036\101\037\116\041\107\042\102\043\111" +
    "\044\105\053\106\054\113\055\110\056\112\060\103\061" +
    "\104\064\322\066\115\067\114\001\002\000\050\003\ufff8" +
    "\004\ufff8\006\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\050\ufff8\001\002\000" +
    "\026\023\060\024\062\025\074\026\063\027\067\030\073" +
    "\040\076\042\057\045\064\070\066\001\002\000\040\036" +
    "\101\037\116\041\107\042\102\043\111\044\105\046\325" +
    "\053\106\054\113\055\110\056\112\060\103\061\104\066" +
    "\115\067\114\001\002\000\004\047\326\001\002\000\042" +
    "\003\032\006\023\011\022\014\036\015\016\016\026\017" +
    "\021\021\012\022\031\030\025\031\014\032\040\033\015" +
    "\034\034\035\027\050\327\001\002\000\050\003\ufff0\004" +
    "\ufff0\006\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\021\ufff0\022\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\050\ufff0\001\002\000\004" +
    "\050\331\001\002\000\050\003\ufff1\004\ufff1\006\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\050\ufff1\001\002\000\050\003\uffec\004\uffec" +
    "\006\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\050\uffec\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\012\016\027\017\032\020\017\023" +
    "\034\024\023\025\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\012\016\027\017\032" +
    "\020\017\023\034\024\201\025\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\045\022" +
    "\044\025\047\001\001\000\010\021\160\022\044\025\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\074\006" +
    "\064\011\060\012\070\013\071\014\067\015\076\001\001" +
    "\000\016\005\147\011\060\012\070\013\071\014\067\015" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\145\011\060\012" +
    "\070\013\071\014\067\015\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\077\011\060\012" +
    "\070\013\071\014\067\015\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\131\011\060\012\070\013" +
    "\071\014\067\015\076\001\001\000\016\005\130\011\060" +
    "\012\070\013\071\014\067\015\076\001\001\000\016\005" +
    "\127\011\060\012\070\013\071\014\067\015\076\001\001" +
    "\000\016\005\126\011\060\012\070\013\071\014\067\015" +
    "\076\001\001\000\016\005\125\011\060\012\070\013\071" +
    "\014\067\015\076\001\001\000\016\005\124\011\060\012" +
    "\070\013\071\014\067\015\076\001\001\000\016\005\123" +
    "\011\060\012\070\013\071\014\067\015\076\001\001\000" +
    "\016\005\122\011\060\012\070\013\071\014\067\015\076" +
    "\001\001\000\016\005\121\011\060\012\070\013\071\014" +
    "\067\015\076\001\001\000\016\005\120\011\060\012\070" +
    "\013\071\014\067\015\076\001\001\000\016\005\117\011" +
    "\060\012\070\013\071\014\067\015\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\116\011\060\012" +
    "\070\013\071\014\067\015\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\144\011\060" +
    "\012\070\013\071\014\067\015\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\152\011\060\012\070\013\071\014\067\015\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\155\011\060\012\070\013\071\014\067\015\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\167\011\060\012\070\013\071\014\067\015\076\001\001" +
    "\000\002\001\001\000\016\005\171\011\060\012\070\013" +
    "\071\014\067\015\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\176\004\174\016\027\017\032\025" +
    "\016\001\001\000\014\003\200\004\174\016\027\017\032" +
    "\025\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\207\004\174\016\027\017\032\025\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\213\011\060\012\070\013\071\014\067" +
    "\015\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\220\011\060" +
    "\012\070\013\071\014\067\015\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\224" +
    "\011\060\012\070\013\071\014\067\015\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\230\011\060\012\070\013\071\014\067\015\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\233" +
    "\004\174\016\027\017\032\025\016\001\001\000\002\001" +
    "\001\000\004\007\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\243\011\060\012\070\013\071\014\067" +
    "\015\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\246\004\174\016\027\017\032\025\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\251\004" +
    "\174\016\027\017\032\025\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\254\004\174\016\027\017" +
    "\032\025\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\257\011\060\012\070\013\071\014\067\015" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\262\004\174\016\027\017\032\025\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\265\011\060" +
    "\012\070\013\071\014\067\015\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\273\011\060\012" +
    "\070\013\071\014\067\015\076\001\001\000\002\001\001" +
    "\000\014\003\275\004\174\016\027\017\032\025\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\301\011\060\012\070\013\071\014\067\015" +
    "\076\001\001\000\002\001\001\000\014\003\303\004\174" +
    "\016\027\017\032\025\016\001\001\000\002\001\001\000" +
    "\014\003\305\004\174\016\027\017\032\025\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\312\011\060\012\070\013\071" +
    "\014\067\015\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\320\011\060\012\070\013\071\014\067\015" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\323\011\060\012\070\013\071\014\067\015\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\327" +
    "\004\174\016\027\017\032\025\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();
    public LinkedList<Variable> variables = new LinkedList<>();
    public LinkedList<Variable> variables_json = new LinkedList<>();

    public void setValues (LinkedList<Variable> variablesjson) {
        variables_json = variablesjson;
    }

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, s.right));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        throw new Exception("Error irrecuperable en: " + s.value + ", Linea: " + s.left + ", Columna: " + (s.right));
    }  

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action_part00000000(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET mainstatements RIGHT_CURLY_BRACKET 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 parser.AST = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatement mainstatements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatements",18, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainstatement ::= function 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = f; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("mainstatement",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=t; RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= data_type ID SEMI_COLON 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= data_type ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= ID EQUAL expr SEMI_COLON 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=i; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new Switch(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= SWITCH LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET cases DEFAULT COLON statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Switch(e, c, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= for 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT=f; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = new While(e, s);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		RESULT = new While(e);
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= DO LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(s, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= DO LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET WHILE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new DoWhile(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= CONSOLE PERIOD WRITE LEFT_PARENTHESIS expr RIGHT_PARENTHESIS SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Print(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= CONTINUE SEMI_COLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(c, EnumTerminals.CONTINUE); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= BREAK SEMI_COLON 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(b, EnumTerminals.BREAK); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= error RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= error SEMI_COLON 
            {
              Statement RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // data_type ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // data_type ::= DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(d); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // data_type ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(c); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // data_type ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_type ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = String.valueOf(b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("data_type",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_list ::= expr_list COMMA expr 
            {
              LinkedList<Operation> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Operation> l = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = l; RESULT.add(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr 
            {
              LinkedList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Operation>(); RESULT.add(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr_list",4, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= VOID ID LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_CURLY_BRACKET funcstatements RIGHT_CURLY_BRACKET 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Declaration_Assignment> f = (LinkedList<Declaration_Assignment>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Function(i, f, variables, variables_json); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("function",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcstatements ::= funcstatement funcstatements 
            {
              LinkedList<Declaration_Assignment> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Declaration_Assignment f = (Declaration_Assignment)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Declaration_Assignment> s = (LinkedList<Declaration_Assignment>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; RESULT.add(f); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatements",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcstatements ::= funcstatement 
            {
              LinkedList<Declaration_Assignment> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Declaration_Assignment f = (Declaration_Assignment)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Declaration_Assignment>(); RESULT.add(f); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatements",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcstatement ::= data_type ID SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcstatement ::= data_type ID EQUAL expr SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); variables.add(new Variable(i, e, "")); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcstatement ::= ID EQUAL expr SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Declaration_Assignment(i, e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcstatement ::= data_type LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET ID EQUAL LEFT_CURLY_BRACKET expr_list RIGHT_CURLY_BRACKET SEMI_COLON 
            {
              Declaration_Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Operation> l = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		 RESULT = new Declaration_Assignment(i, l); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new If(e, s, l, null); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= IF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET elseifs ELSE LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<ElseIf> l = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> t = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new If(e, s, l, t); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-11)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elseifs ::= elseifs ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		LinkedList<ElseIf> f = (LinkedList<ElseIf>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = f; RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elseifs ::= ELSEIF LEFT_PARENTHESIS expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              LinkedList<ElseIf> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new LinkedList<ElseIf>(); RESULT.add(new ElseIf(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("elseifs",5, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cases ::= cases CASE expr COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = c; RESULT.add(new Case(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cases ::= CASE expr COLON statements 
            {
              LinkedList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new LinkedList<Case>(); RESULT.add(new Case(e, s)); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("cases",6, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statements RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).right;
		Operation x = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new For(i, n, e, x, s); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-13)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for ::= FOR LEFT_PARENTHESIS INT ID EQUAL INTEGER SEMI_COLON expr SEMI_COLON expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		Operation x = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		 RESULT = new For(i, n, e, x); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-12)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = s; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = a; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= relational 
            {
              Operation RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation r = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = r; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = l; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = u; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.ID); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // symbols ::= TEXT 
            {
              Operation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(t, EnumTerminals.TEXT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // symbols ::= CHARACTER 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(c, EnumTerminals.CHARACTER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // symbols ::= INTEGER 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(i, EnumTerminals.INTEGER); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // symbols ::= DECIMAL 
            {
              Operation RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(d, EnumTerminals.DECIMAL); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // symbols ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(b, EnumTerminals.BOOLEAN); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // symbols ::= DOLLAR LEFT_CURLY_BRACKET ID COMMA TEXT COMMA TEXT RIGHT_CURLY_BRACKET 
            {
              Operation RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 SearchValue val = new SearchValue(variables_json, String.valueOf(p), String.valueOf(i)); RESULT = new Operation(val.getValue(), val.getTypeTerminal()); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("symbols",7, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-7)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aritmetic ::= expr PLUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.PLUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritmetic ::= expr MINUS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MINUS, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritmetic ::= expr TIMES expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.TIMES, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // aritmetic ::= expr DIVIDE expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDE, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("aritmetic",8, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational ::= expr GREATER_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational ::= expr LESS_THAN expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_THAN, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational ::= expr GREATER_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.GREATER_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relational ::= expr LESS_EQUAL expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.LESS_EQUAL, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relational ::= expr EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.EQUAL_TO, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relational ::= expr NOT_EQUAL_TO expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.NOT_EQUAL_TO, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("relational",9, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.AND, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.OR, b); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("logical",10, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unitary ::= MINUS expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.MINUS); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.NOT); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unitary ::= expr INCREASE 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.INCREASE); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unitary ::= expr DECREASE 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 RESULT = new Operation(e, EnumUnitaryOperations.DECREASE); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("unitary",11, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntactic$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
              return CUP$Syntactic$do_action_part00000000(
                               CUP$Syntactic$act_num,
                               CUP$Syntactic$parser,
                               CUP$Syntactic$stack,
                               CUP$Syntactic$top);
    }
}

}
