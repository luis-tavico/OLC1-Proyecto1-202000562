
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;
import instructions.Statement;
import instructions.Operation;
import instructions.Param;
import enums.EnumOperations;
import enums.EnumTerminals;
import enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\005\011\000\002\006\004\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\012\005\000\002\013\005\000\002\014\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\007\000\002\020\007\000\002\021\007\000\002\022" +
    "\007\000\002\023\007\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\011\000\002\025\013\000\002" +
    "\025\012\000\002\025\012\000\002\033\013\000\002\033" +
    "\012\000\002\034\006\000\002\026\011\000\002\026\012" +
    "\000\002\035\007\000\002\035\006\000\002\036\005\000" +
    "\002\027\015\000\002\030\011\000\002\031\013\000\002" +
    "\032\011\000\002\041\005\000\002\037\005\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\003\000\002\043\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\004\006\001\002\000\004\002\255\001" +
    "\002\000\004\002\uffff\001\002\000\004\065\010\001\002" +
    "\000\004\002\000\001\002\000\004\036\011\001\002\000" +
    "\004\037\012\001\002\000\004\040\013\001\002\000\034" +
    "\005\032\007\027\013\051\014\021\015\035\016\030\020" +
    "\017\021\056\022\022\023\046\024\037\060\023\061\050" +
    "\001\002\000\042\005\ufff8\007\ufff8\010\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\041\ufff8\060\ufff8\061\ufff8\001\002\000" +
    "\042\005\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\041\uffe2\060\uffe2\061\uffe2\001\002\000\004\041\254" +
    "\001\002\000\004\065\252\001\002\000\042\005\uffec\007" +
    "\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\041\uffec\060" +
    "\uffec\061\uffec\001\002\000\004\036\244\001\002\000\004" +
    "\065\237\001\002\000\052\005\uffbb\007\uffbb\010\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\041\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\060\uffbb\061\uffbb\001\002\000\042\005\uffe9" +
    "\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\041\uffe9" +
    "\060\uffe9\061\uffe9\001\002\000\042\005\uffe3\007\uffe3\010" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\041\uffe3\060\uffe3\061" +
    "\uffe3\001\002\000\042\005\032\007\027\010\ufffc\012\ufffc" +
    "\013\051\014\021\015\035\016\030\020\017\021\056\022" +
    "\022\023\046\024\037\041\ufffc\060\023\061\050\001\002" +
    "\000\004\036\213\001\002\000\004\053\205\001\002\000" +
    "\042\005\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\041\uffeb\060\uffeb\061\uffeb\001\002\000\004\036\151" +
    "\001\002\000\042\005\ufff4\007\ufff4\010\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\041\ufff4\060\ufff4\061\ufff4\001\002\000" +
    "\042\005\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\041\ufffa\060\ufffa\061\ufffa\001\002\000\004\040\141" +
    "\001\002\000\042\005\ufffb\007\ufffb\010\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\041\ufffb\060\ufffb\061\ufffb\001\002\000" +
    "\004\065\134\001\002\000\042\005\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\041\ufff9\060\ufff9\061\ufff9" +
    "\001\002\000\042\005\ufff5\007\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\041\ufff5\060\ufff5\061\ufff5\001\002\000" +
    "\042\005\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\041\uffe1\060\uffe1\061\uffe1\001\002\000\042\005\uffde" +
    "\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\041\uffde" +
    "\060\uffde\061\uffde\001\002\000\042\005\uffe0\007\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\041\uffe0\060\uffe0\061" +
    "\uffe0\001\002\000\052\005\ufff3\007\ufff3\010\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\041\ufff3\047\124\050\125\051\127" +
    "\052\126\060\ufff3\061\ufff3\001\002\000\004\065\117\001" +
    "\002\000\042\005\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\041\uffdf\060\uffdf\061\uffdf\001\002\000\052" +
    "\005\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\041\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\060\uffbc\061" +
    "\uffbc\001\002\000\004\036\064\001\002\000\042\005\ufff7" +
    "\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\041\ufff7" +
    "\060\ufff7\061\ufff7\001\002\000\042\005\ufff6\007\ufff6\010" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\041\ufff6\060\ufff6\061" +
    "\ufff6\001\002\000\042\005\uffed\007\uffed\010\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\041\uffed\060\uffed\061\uffed\001\002" +
    "\000\042\005\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\041\uffea\060\uffea\061\uffea\001\002\000\004\065" +
    "\057\001\002\000\006\046\061\055\060\001\002\000\042" +
    "\005\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\041\ufff1\060\ufff1\061\ufff1\001\002\000\004\060\062\001" +
    "\002\000\004\055\063\001\002\000\042\005\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\041\uffe7\060\uffe7" +
    "\061\uffe7\001\002\000\004\020\066\001\002\000\010\060" +
    "\076\061\077\065\073\001\002\000\004\065\067\001\002" +
    "\000\004\046\070\001\002\000\004\061\071\001\002\000" +
    "\004\055\072\001\002\000\044\005\uffe8\007\uffe8\010\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\041\uffe8\060\uffe8\061\uffe8" +
    "\065\uffe8\001\002\000\022\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\037\uffcb\044\uffcb\045\uffcb\055\uffcb\001\002\000\016" +
    "\032\107\033\110\034\114\035\115\044\112\045\113\001" +
    "\002\000\004\055\100\001\002\000\022\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\044\uffc9\045\uffc9\055\uffc9\001" +
    "\002\000\022\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca" +
    "\044\uffca\045\uffca\055\uffca\001\002\000\004\065\101\001" +
    "\002\000\004\030\102\001\002\000\004\037\103\001\002" +
    "\000\004\040\104\001\002\000\034\005\032\007\027\013" +
    "\051\014\021\015\035\016\030\020\017\021\056\022\022" +
    "\023\046\024\037\060\023\061\050\001\002\000\004\041" +
    "\106\001\002\000\042\005\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\041\uffd1\060\uffd1\061\uffd1\001\002" +
    "\000\010\060\uffc4\061\uffc4\065\uffc4\001\002\000\010\060" +
    "\uffc3\061\uffc3\065\uffc3\001\002\000\010\060\076\061\077" +
    "\065\073\001\002\000\010\060\uffc7\061\uffc7\065\uffc7\001" +
    "\002\000\010\060\uffc8\061\uffc8\065\uffc8\001\002\000\010" +
    "\060\uffc5\061\uffc5\065\uffc5\001\002\000\010\060\uffc6\061" +
    "\uffc6\065\uffc6\001\002\000\006\037\uffcc\055\uffcc\001\002" +
    "\000\006\046\120\055\121\001\002\000\004\064\122\001" +
    "\002\000\042\005\uffef\007\uffef\010\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\041\uffef\060\uffef\061\uffef\001\002\000\004" +
    "\055\123\001\002\000\042\005\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\041\uffe5\060\uffe5\061\uffe5\001" +
    "\002\000\006\060\023\061\050\001\002\000\006\060\023" +
    "\061\050\001\002\000\006\060\023\061\050\001\002\000" +
    "\006\060\023\061\050\001\002\000\052\005\uffbe\007\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\041\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\060\uffbe\061\uffbe\001\002\000" +
    "\052\005\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\041\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\060\uffbd" +
    "\061\uffbd\001\002\000\052\005\uffbf\007\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\041\uffbf\047\uffbf\050\uffbf\051" +
    "\127\052\126\060\uffbf\061\uffbf\001\002\000\052\005\uffc0" +
    "\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\041\uffc0" +
    "\047\uffc0\050\uffc0\051\127\052\126\060\uffc0\061\uffc0\001" +
    "\002\000\006\046\136\055\135\001\002\000\042\005\uffee" +
    "\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\041\uffee" +
    "\060\uffee\061\uffee\001\002\000\004\062\137\001\002\000" +
    "\004\055\140\001\002\000\042\005\uffe4\007\uffe4\010\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\041\uffe4\060\uffe4\061\uffe4" +
    "\001\002\000\034\005\032\007\027\013\051\014\021\015" +
    "\035\016\030\020\017\021\056\022\022\023\046\024\037" +
    "\060\023\061\050\001\002\000\004\041\143\001\002\000" +
    "\004\014\144\001\002\000\004\036\145\001\002\000\010" +
    "\060\076\061\077\065\073\001\002\000\004\037\147\001" +
    "\002\000\004\055\150\001\002\000\042\005\uffcf\007\uffcf" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\041\uffcf\060\uffcf" +
    "\061\uffcf\001\002\000\010\060\076\061\077\065\073\001" +
    "\002\000\004\037\153\001\002\000\004\040\154\001\002" +
    "\000\034\005\032\007\027\013\051\014\021\015\035\016" +
    "\030\020\017\021\056\022\022\023\046\024\037\060\023" +
    "\061\050\001\002\000\004\041\156\001\002\000\044\005" +
    "\uffdd\006\160\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\041\uffdd\060\uffdd\061\uffdd\001\002\000\042\005\uffda" +
    "\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\041\uffda" +
    "\060\uffda\061\uffda\001\002\000\006\005\176\040\164\001" +
    "\002\000\044\005\uffdb\006\163\007\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\041\uffdb\060\uffdb\061\uffdb\001\002" +
    "\000\042\005\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\041\uffdc\060\uffdc\061\uffdc\001\002\000\006\005" +
    "\165\040\164\001\002\000\034\005\032\007\027\013\051" +
    "\014\021\015\035\016\030\020\017\021\056\022\022\023" +
    "\046\024\037\060\023\061\050\001\002\000\004\036\166" +
    "\001\002\000\010\060\076\061\077\065\073\001\002\000" +
    "\004\037\170\001\002\000\004\040\171\001\002\000\034" +
    "\005\032\007\027\013\051\014\021\015\035\016\030\020" +
    "\017\021\056\022\022\023\046\024\037\060\023\061\050" +
    "\001\002\000\004\041\173\001\002\000\044\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\041" +
    "\uffd9\060\uffd9\061\uffd9\001\002\000\004\041\175\001\002" +
    "\000\042\005\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\041\uffd7\060\uffd7\061\uffd7\001\002\000\004\036" +
    "\177\001\002\000\010\060\076\061\077\065\073\001\002" +
    "\000\004\037\201\001\002\000\004\040\202\001\002\000" +
    "\034\005\032\007\027\013\051\014\021\015\035\016\030" +
    "\020\017\021\056\022\022\023\046\024\037\060\023\061" +
    "\050\001\002\000\004\041\204\001\002\000\044\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\041\uffd8\060\uffd8\061\uffd8\001\002\000\004\017\206\001" +
    "\002\000\004\036\207\001\002\000\004\062\210\001\002" +
    "\000\004\037\211\001\002\000\004\055\212\001\002\000" +
    "\042\005\uffce\007\uffce\010\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\041\uffce\060\uffce\061\uffce\001\002\000\004\065\214" +
    "\001\002\000\004\037\215\001\002\000\004\040\216\001" +
    "\002\000\004\010\220\001\002\000\010\010\227\012\224" +
    "\041\226\001\002\000\004\061\221\001\002\000\004\056" +
    "\222\001\002\000\034\005\032\007\027\013\051\014\021" +
    "\015\035\016\030\020\017\021\056\022\022\023\046\024" +
    "\037\060\023\061\050\001\002\000\010\010\uffd3\012\uffd3" +
    "\041\uffd3\001\002\000\004\056\234\001\002\000\004\041" +
    "\233\001\002\000\042\005\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\041\uffd6\060\uffd6\061\uffd6\001\002" +
    "\000\004\061\230\001\002\000\004\056\231\001\002\000" +
    "\034\005\032\007\027\013\051\014\021\015\035\016\030" +
    "\020\017\021\056\022\022\023\046\024\037\060\023\061" +
    "\050\001\002\000\010\010\uffd4\012\uffd4\041\uffd4\001\002" +
    "\000\042\005\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\041\uffd5\060\uffd5\061\uffd5\001\002\000\034\005" +
    "\032\007\027\013\051\014\021\015\035\016\030\020\017" +
    "\021\056\022\022\023\046\024\037\060\023\061\050\001" +
    "\002\000\004\041\uffd2\001\002\000\010\010\ufffd\012\ufffd" +
    "\041\ufffd\001\002\000\006\046\240\055\241\001\002\000" +
    "\004\063\242\001\002\000\042\005\ufff0\007\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\041\ufff0\060\ufff0\061\ufff0" +
    "\001\002\000\004\055\243\001\002\000\042\005\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\041\uffe6\060" +
    "\uffe6\061\uffe6\001\002\000\010\060\076\061\077\065\073" +
    "\001\002\000\004\037\246\001\002\000\004\040\247\001" +
    "\002\000\034\005\032\007\027\013\051\014\021\015\035" +
    "\016\030\020\017\021\056\022\022\023\046\024\037\060" +
    "\023\061\050\001\002\000\004\041\251\001\002\000\042" +
    "\005\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\041\uffd0\060\uffd0\061\uffd0\001\002\000\006\046\070\055" +
    "\253\001\002\000\042\005\ufff2\007\ufff2\010\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\041\ufff2\060\ufff2\061\ufff2\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\010\002\003\004\006\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\015\007\025\010\035\011\013\012\051" +
    "\013\052\014\040\015\032\016\033\017\053\020\017\021" +
    "\030\022\054\023\023\024\037\025\024\026\014\027\041" +
    "\030\043\031\046\032\042\043\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\235\007\025\010\035\011\013\012\051\013\052\014" +
    "\040\015\032\016\033\017\053\020\017\021\030\022\054" +
    "\023\023\024\037\025\024\026\014\027\041\030\043\031" +
    "\046\032\042\043\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\064\001\001\000" +
    "\006\037\074\044\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\006\104\007\025\010\035\011\013\012\051\013" +
    "\052\014\040\015\032\016\033\017\053\020\017\021\030" +
    "\022\054\023\023\024\037\025\024\026\014\027\041\030" +
    "\043\031\046\032\042\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\132\001\001\000" +
    "\004\043\131\001\001\000\004\043\130\001\001\000\004" +
    "\043\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\141\007\025\010\035\011\013\012\051" +
    "\013\052\014\040\015\032\016\033\017\053\020\017\021" +
    "\030\022\054\023\023\024\037\025\024\026\014\027\041" +
    "\030\043\031\046\032\042\043\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\145" +
    "\044\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\151\044\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\154\007\025\010" +
    "\035\011\013\012\051\013\052\014\040\015\032\016\033" +
    "\017\053\020\017\021\030\022\054\023\023\024\037\025" +
    "\024\026\014\027\041\030\043\031\046\032\042\043\044" +
    "\001\001\000\002\001\001\000\006\033\160\034\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\006" +
    "\173\007\025\010\035\011\013\012\051\013\052\014\040" +
    "\015\032\016\033\017\053\020\017\021\030\022\054\023" +
    "\023\024\037\025\024\026\014\027\041\030\043\031\046" +
    "\032\042\043\044\001\001\000\002\001\001\000\006\037" +
    "\166\044\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\006\171\007\025\010\035\011\013\012\051\013" +
    "\052\014\040\015\032\016\033\017\053\020\017\021\030" +
    "\022\054\023\023\024\037\025\024\026\014\027\041\030" +
    "\043\031\046\032\042\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\177\044\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\202\007\025\010" +
    "\035\011\013\012\051\013\052\014\040\015\032\016\033" +
    "\017\053\020\017\021\030\022\054\023\023\024\037\025" +
    "\024\026\014\027\041\030\043\031\046\032\042\043\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\216\001\001" +
    "\000\004\036\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\222\007\025\010\035\011\013\012\051" +
    "\013\052\014\040\015\032\016\033\017\053\020\017\021" +
    "\030\022\054\023\023\024\037\025\024\026\014\027\041" +
    "\030\043\031\046\032\042\043\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\231\007" +
    "\025\010\035\011\013\012\051\013\052\014\040\015\032" +
    "\016\033\017\053\020\017\021\030\022\054\023\023\024" +
    "\037\025\024\026\014\027\041\030\043\031\046\032\042" +
    "\043\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\234\007\025\010\035\011\013\012\051\013\052" +
    "\014\040\015\032\016\033\017\053\020\017\021\030\022" +
    "\054\023\023\024\037\025\024\026\014\027\041\030\043" +
    "\031\046\032\042\043\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\244\044\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\006\247\007\025\010\035\011\013\012\051\013" +
    "\052\014\040\015\032\016\033\017\053\020\017\021\030" +
    "\022\054\023\023\024\037\025\024\026\014\027\041\030" +
    "\043\031\046\032\042\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
        if (s.value != null)
            errors.add(new SintaxError(s.value.toString(), s.left, s.right));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left) + ", Columna: " + (s.right-1));
    }

            

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= codigo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= metodo_inicial 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // metodo_inicial ::= TIPO_RETORNO IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;
		 parser.AST = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo_inicial",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;
		 RESULT = s; RESULT.add(t); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		 RESULT = new LinkedList<Statement>(); RESULT.add(s); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracion_int 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declaracion_double 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= declaracion_char 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= declaracion_bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= declaracion_string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_int ::= INT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_int",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_double ::= DOUBLE IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_double",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_char ::= CHAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_char",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_bool ::= BOOL IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_bool",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_string ::= STRING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_string",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= asignacion_int 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= asignacion_double 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= asignacion_char 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= asignacion_bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion ::= asignacion_string 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion_int ::= INT IDENTIFICADOR IGUAL ENTERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_int",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion_double ::= DOUBLE IDENTIFICADOR IGUAL DECIMAL PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_double",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion_char ::= CHAR IDENTIFICADOR IGUAL CARACTER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_char",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion_bool ::= BOOL IDENTIFICADOR IGUAL BOOLEANO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion_string ::= STRING IDENTIFICADOR IGUAL CADENA PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_string",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= sentencia_do_while 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= sentencia_imprimir 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 RESULT = s; System.out.println(s); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA sentencia_else_if sentencia_else 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 RESULT = s; System.out.println(s); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA sentencia_else_if 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		 RESULT = s; System.out.println(s); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_if ::= IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA sentencia_else 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		 RESULT = s; System.out.println(s); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_else_if ::= sentencia_else_if ELSE IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_else_if ::= ELSE IF PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_else_if",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_else ::= ELSE LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_else",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_switch ::= SWITCH PARENTESIS_ABIERTO IDENTIFICADOR PARENTESIS_CERRADO LLAVE_ABIERTA sentencia_case LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_switch",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_switch ::= SWITCH PARENTESIS_ABIERTO IDENTIFICADOR PARENTESIS_CERRADO LLAVE_ABIERTA sentencia_case sentencia_default LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_switch",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_case ::= sentencia_case CASE ENTERO DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_case",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_case ::= CASE ENTERO DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_case",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_default ::= DEFAULT DOS_PUNTOS instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_default",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_for ::= FOR PARENTESIS_ABIERTO asignacion_int expresion_relacional PUNTO_COMA IDENTIFICADOR INCREMENTO PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_for",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_while ::= WHILE PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_while",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_do_while ::= DO LLAVE_ABIERTA instrucciones LLAVE_CERRADA WHILE PARENTESIS_ABIERTO expresion_relacional PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_imprimir ::= CONSOLE PUNTO WRITE PARENTESIS_ABIERTO CADENA PARENTESIS_CERRADO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_imprimir",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_logica ::= expresion_relacional operador_logico expresion_relacional 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_relacional ::= valor_comparar operador_relacional valor_comparar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor_comparar ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_comparar",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor_comparar ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_comparar",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor_comparar ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_comparar",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_relacional ::= MAYOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_relacional ::= MENOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_relacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_relacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_relacional ::= IGUAL_QUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_relacional ::= DISTINTO_QUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_logico ::= AND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_logico ::= OR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_aritmetica ::= expresion_aritmetica MAS expresion_aritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MAS, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_aritmetica ::= expresion_aritmetica MENOS expresion_aritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.MENOS, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_aritmetica ::= expresion_aritmetica POR expresion_aritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.POR, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_aritmetica ::= expresion_aritmetica DIVIDIDO expresion_aritmetica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(a, EnumOperations.DIVIDIDO, b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_aritmetica ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(n, EnumTerminals.ENTERO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_aritmetica ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Operation(n, EnumTerminals.DECIMAL); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
