package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import errors.SintaxError;

parser code {:

    public LinkedList<SintaxError> sintaxErrors = new LinkedList<>();

    public void syntax_error(Symbol s){
        if (s.value != null)
            sintaxErrors.add(new SintaxError(s.value.toString(), s.left, s.right));
        System.out.println("Error sintactico en: " + s.value.toString() + ", Linea: " + (s.left) + ", Columna: " + (s.right));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error sintactico NR en: " + s.value + ", Linea: " + (s.left+1) + ", Columna: " + (s.right+1));
    }

            :}

terminal TIPO_RETORNO, IF, ELIF, ELSE, SWITCH, CASE, BREAK, DEFAULT, FOR, WHILE, DO, CONSOLE, WRITE;
terminal INT, DOUBLE, CHAR, BOOL, STRING;
terminal AND, OR, NOT; 
terminal INCREMENTO, DECREMENTO; 
terminal IGUAL_QUE, DISTINTO_QUE, MENOR_IGUAL, MAYOR_IGUAL, PARENTESIS_ABIERTO, PARENTESIS_CERRADO,
         LLAVE_ABIERTA, LLAVE_CERRADA, CORCHETE_ABIERTO, CORCHETE_CERRADO, MENOR, MAYOR, IGUAL,
         MAS, MENOS, ASTERISCO, DIAGONAL, PUNTO, COMA, PUNTO_COMA, DOS_PUNTOS, COMILLA_DOBLE, 
         DECIMAL, ENTERO, CADENA, CARACTER, BOOLEANO, IDENTIFICADOR;

non terminal ini;
non terminal codigo;
non terminal metodo_inicial;
non terminal instrucciones;
non terminal instruccion;
non terminal declaracion;
non terminal declaracion_int, declaracion_double, declaracion_char, declaracion_bool, declaracion_string;
non terminal asignacion;
non terminal asignacion_int, asignacion_double, asignacion_char, asignacion_bool, asignacion_string;
non terminal sentencia;
non terminal sentencia_if, sentencia_for;
non terminal expresion_relacional;
non terminal valor_comparar;
non terminal operador;
non terminal imprimir;
non terminal lexema;

start with ini;

ini ::= codigo;

codigo ::= metodo_inicial;

metodo_inicial ::= TIPO_RETORNO IDENTIFICADOR PARENTESIS_ABIERTO PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA;

instrucciones ::= instruccion instrucciones
                | instruccion;

instruccion ::= declaracion
              | asignacion
              | sentencia
              | imprimir;

declaracion ::= declaracion_int
              | declaracion_double
              | declaracion_char
              | declaracion_bool
              | declaracion_string;

declaracion_int ::= INT IDENTIFICADOR PUNTO_COMA;
declaracion_double ::= DOUBLE IDENTIFICADOR PUNTO_COMA;
declaracion_char ::= CHAR IDENTIFICADOR PUNTO_COMA;
declaracion_bool ::= BOOL IDENTIFICADOR PUNTO_COMA;
declaracion_string ::= STRING IDENTIFICADOR PUNTO_COMA;

asignacion ::= asignacion_int
             | asignacion_double
             | asignacion_char
             | asignacion_bool
             | asignacion_string;

asignacion_int ::= INT IDENTIFICADOR IGUAL ENTERO PUNTO_COMA;
asignacion_double  ::= DOUBLE IDENTIFICADOR IGUAL DECIMAL PUNTO_COMA; 
asignacion_char ::= CHAR IDENTIFICADOR IGUAL CARACTER PUNTO_COMA; 
asignacion_bool ::= BOOL IDENTIFICADOR IGUAL BOOLEANO PUNTO_COMA;
asignacion_string ::= STRING IDENTIFICADOR IGUAL CADENA PUNTO_COMA;


sentencia ::= sentencia_if
            | sentencia_for;

sentencia_if ::= IF PARENTESIS_ABIERTO expresion_relacional:s PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA {: RESULT = s; System.out.println(s); :};
sentencia_switch ::= SWITCH PARENTESIS_ABIERTO ENTERO PARENTESIS_CERRADO LLAVE_CERRADA;
sentencia_for ::= FOR PARENTESIS_ABIERTO asignacion_int expresion_relacional PUNTO_COMA IDENTIFICADOR INCREMENTO PARENTESIS_CERRADO LLAVE_ABIERTA instrucciones LLAVE_CERRADA;

expresion_relacional ::= valor_comparar operador:s valor_comparar {: RESULT = s; :};

valor_comparar ::= IDENTIFICADOR
                 | ENTERO
                 | DECIMAL;

operador ::= MAYOR:s {: RESULT = s; :}
           | MENOR:s {: RESULT = s; :}
           | MAYOR_IGUAL:s {: RESULT = s; :}
           | MENOR_IGUAL:s {: RESULT = s; :}
           | IGUAL_QUE:s {: RESULT = s; :}
           | DISTINTO_QUE:s {: RESULT = s; :};

imprimir ::= CONSOLE PUNTO WRITE PARENTESIS_ABIERTO CADENA PARENTESIS_CERRADO PUNTO_COMA;